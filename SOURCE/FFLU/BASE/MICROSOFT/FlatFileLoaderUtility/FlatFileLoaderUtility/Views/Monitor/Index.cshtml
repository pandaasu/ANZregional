@model FlatFileLoaderUtility.ViewModels.InterfaceMonitorListViewModel

@{
    ViewBag.Title = "";
}

@section JavascriptImport {
    <script type="text/javascript">

        /**************************************************
        /* Page Variables
        /**************************************************/
        var autoCounter = 0; // Used to stop multiple reload attempts when checking auto-reload
        var isLoading = false;
        var status = null;

        /**************************************************
        /* Document Ready
        /**************************************************/
        $(document).ready(function () {
            // Plugin instantiation
            $("button").button();
            $("#ddlInterfaceGroup").chosen({ search_contains: true });
            $("#ddlInterface").chosen({ search_contains: true });
            $("#ddlInterfaceType").chosen({ search_contains: true });
            $("#ddlIcsStatus").chosen({ search_contains: true });
            $("#ddlPerPage").chosen({ search_contains: true });
            $(".time").attr("placeholder", "HH:mm").timepicker({});
            $(".date").attr("placeholder", "dd/MM/yyyy").datepicker({
                dateFormat: "dd/mm/yy"
            });
            $("#progressbar").progressbar({
                value: 0
            });
            $("#TableContainer").jtable({
                addRecordButton: $("#none"),
                paging: true,
                pageSize: 15,
                sorting: false,
                selecting: true,
                multiselect: false,
                selectingCheckboxes: false,
                defaultDateFormat: "dd/mm/yy",
                actions: {
                    listAction: '@Url.Action("MonitorList")'
                },
                fields: {
                    LicsId: {
                        key: true,
                        title: "Id",
                        width: "4%",
                        visibility: "fixed"
                    },
                    TraceId: {
                        title: "Trace",
                        width: "2%",
                        visibility: "hidden"
                    },
                    UserCode: {
                        title: "User",
                        width: "5%",
                        visibility: "hidden"
                    },
                    InterfaceCode: {
                        title: "Int. Code",
                        width: "5%",
                        visibility: "hidden"
                    },
                    InterfaceName: {
                        title: "Int. Name",
                        width: "20%",
                        visibility: "visible"
                    },
                    FileName: {
                        title: "File",
                        width: "20%",
                        visibility: "visible"
                    },
                    StartTimeFormatted: {
                        title: "Start",
                        width: "10%",
                        visibility: "visible"
                    },
                    EndTimeFormatted: {
                        title: "End",
                        width: "10%",
                        visibility: "hidden"
                    },
                    Status: {
                        title: "Status",
                        width: "11%",
                        visibility: "visible"
                    },
                    RecordCount: {
                        title: "Rows",
                        width: "3%",
                        visibility: "visible"
                    },
                    InterfaceErrorCount: {
                        title: "Int.Err",
                        width: "3%",
                        visibility: "hidden",
                        display: function (data) {
                            return (data.record.InterfaceErrorCount == 0) ? "0" : data.record.InterfaceErrorCount;
                        }
                    },
                    RowErrorCount: {
                        title: "Row.Err",
                        width: "3%",
                        visibility: "hidden",
                        display: function (data) {
                            return (data.record.RowErrorCount == 0) ? "0" : data.record.RowErrorCount;
                        }
                    },
                    Reprocess: {
                        title: "Reprocess",
                        width: "5%",
                        visibility: "visible",
                        display: function (data) {
                            if (data.record.HasProcessAccess) {
                                return $("<input type='hidden' class='licsId' value='" + data.record.LicsId + "' /><input type='hidden' class='interfaceCode' value='" + data.record.InterfaceCode + "' /><input type='checkbox' id='chkReprocess' class='reprocess' />");
                            }
                            else {
                                return "";
                            }
                        }
                    }
                },
                selectionChanged: function () {
                    //Get selected rows
                    var $selectedRows = $("#TableContainer").jtable("selectedRows");

                    if ($selectedRows.length == 1) {
                        $selectedRows.each(function () {
                            var record = $(this).data("record");
                            window.location.href = '@Url.Action("View/", "Monitor")' + record.LicsId;
                        });
                    }
                },
                recordsLoaded: function (event, data) {
                    isLoading = false;
                    if ($("#chkAuto").is(":checked")) {
                        setTimeout("loadResults(" + autoCounter + ", 1);", 10000);
                    }
                    $("#TableContainer tbody td:last-child").click(function (event) {
                        event.stopPropagation();
                    });
                }
            });

            // Event Listeners
            $("#btnReprocess").click(function () {

                if ($(".reprocess:checked").length == 0) {
                    status = new Status();
                    status.IsError = true;
                    status.Message = "You must check the checkboxes of the interfaces you want to reprocess";
                    ShowResult();
                    return false;
                }

                $("#confirmText").text("Are you sure you want to reprocess the selected interfaces?");
                $("#reprocesOptions").show();
                $("#dialogConfirm").dialog({
                    modal: true
                });
                return false;
            });

            $("#ddlPerPage").change(function () {
                $("#TableContainer").jtable("option", "pageSize", $(this).val());
            });

            $("#ddlInterfaceGroup").change(function () {
                GetInterfaceOptions($(this).val(), $("#ddlInterfaceType").val(), $("#ddlInterface"), false, true);
            });

            $("#ddlInterfaceType").change(function () {
                GetInterfaceOptions($("#ddlInterfaceGroup").val(), $(this).val(), $("#ddlInterface"), false, true);
            });
            $(".filtering input").keypress(function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                    $("#btnFilter").click();
                }
            });

            $("#cancel").click(function () {
                $(".ui-dialog-content").dialog("destroy");
            });

            $("#chkAuto").change(function () {
                if ($("#chkAuto").is(":checked")) {
                    autoCounter++;
                    loadResults(autoCounter, 0);
                }
            });

            $("#btnFilter").click(function (e) {
                // Re-load records when user click 'load records' button.
                e.preventDefault();
                loadResults(autoCounter, 0);
            });

            $("#reprocess").click(function () {
                // First, disable the form so that the user can't click the button again
                $(":input").attr("disabled", "disabled").trigger("liszt:updated");
                $("#reprocesOptions").hide();
                $("#confirmText").text("Starting reprocess of interface(s)");

                status = new Status();

                // Please read comments in controller before passing judgement on this diabolical mess... :(
                var ids = "";
                var codes = "";
                $(".reprocess:checked").each(function () {
                    ids += $(this).closest("td").find(".licsId").val() + ",";
                    codes += $(this).closest("td").find(".interfaceCode").val() + ",";
                });

                $.ajax({
                    type: "post",
                    url: "/Monitor/ReprocessList",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({
                        licsIds: ids,
                        interfaceCodes: codes
                    }),
                    async: true,
                    success: function (response) {
                        if (response.Result != "OK") {
                            status.Message = "Error while resubmitting the interface(s).";
                            status.Exception = response.Message;
                            status.IsError = true;
                            ShowResult();
                        }
                        else {
                            status.Message = "Success";
                            status.Exception = "The interface(s) have been resubmitted.";
                            ShowResult();
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        status.Message = "Error communicating with server.";
                        status.Exception = (isTest) ? thrownError : "";
                        status.IsError = true;
                        ShowResult();
                    }
                });
            });

            $("#selectAll").click(function () {
                if ($(this).is(":checked"))
                    $(".reprocess").attr("checked", "checked");
                else
                    $(".reprocess").removeAttr("checked");
            });

            // Document ready actions
            //Load all records when page is first shown
            $("#btnFilter").click();
        });

        /**************************************************
        /* Page Functions
        /**************************************************/

        // Called to retrieve the monitor records and load them into the table
        function loadResults(counter, isAuto) {

            // There could have been an async request underway when the autorefresh checkbox was checked
            // Which would result in multiple requests. This check will ensure that only the "current" series
            // of auto-requests is processed.
            if (counter != autoCounter || isLoading || (isAuto == 1 && !$("#chkAuto").is(":checked")))
                return;

            isLoading = true;

            var startDate = $("#txtStartDate").datepicker("getDate");
            var startTime = $("#txtStartTime").val();
            if (startDate != null && startTime != "") {
                var startParts = startTime.split(":");
                startDate.setHours(parseInt(startParts[0]));
                startDate.setMinutes(parseInt(startParts[1]));
            }

            var endDate = $("#txtEndDate").datepicker("getDate");
            var endTime = $("#txtEndTime").val();
            if (endDate != null && endTime != "") {
                var endParts = endTime.split(":");
                endDate.setHours(parseInt(endParts[0]));
                endDate.setMinutes(parseInt(endParts[1]));
            }

            $("#TableContainer").jtable("load", {
                interfaceGroupCode: $("#ddlInterfaceGroup").val(),
                interfaceTypeCode: $("#ddlInterfaceType").val(),
                interfaceCode: $("#ddlInterface").val(),
                licsId: $("#txtLicsId").val(),
                icsStatusCode: $("#ddlIcsStatus").val(),
                startDate: startDate,
                endDate: endDate
            });
        }

        // Called to show the result of an operation
        function ShowResult() {
            // Re-enable the form underneath the dialog
            $(":input").removeAttr("disabled").trigger("liszt:updated");

            // Remove any existing progress bars or dialog windows
            $(".ui-dialog-content").dialog("destroy");

            // Set the message an exception text
            $("#pMessage").text(status.Message);
            if (status.Exception != "") {
                $("#pException").text(status.Exception);
                $("#pException").show();
            }
            else {
                $("#pException").hide();
            }

            // Show the dialog
            $("#dialogMessage").dialog({
                modal: true,
                title: (status.IsError) ? "Error" : "Message",
                buttons: {
                    Ok: function () {
                        $(this).dialog("close");
                        if (!status.IsError)
                            $("#TableContainer").jtable("reload");
                    }
                }
            });
        }

    </script>
}

<div class="filtering">
    <table cellpadding="0" cellspacing="1">
        <tbody>
            <tr>
                <td style="width:100px;"><label for="ddlInterfaceType">Interface Type</label></td>
                <td style="width:200px;">@Html.DropDownList("ddlInterfaceType", Model.InterfaceTypes, new { id = "ddlInterfaceType", style = "width:175px" })</td>
                <td style="width:50px;"><label for="ddlIcsStatus">Status</label></td>
                <td style="width:235px;">@Html.DropDownList("ddlIcsStatus", Model.IcsStatuses, new { id = "ddlIcsStatus", style = "width:215px" })</td>
                <td style="width:100px;"><label for="txtStartDate">Start Date/Time</label></td>
                <td><input type="text" name="txtStartDate" id="txtStartDate" class="date" />
                    <input type="text" id="txtStartTime" class="time" />
                </td>
                <td style="width:85px;"><label for="txtEndDate">Interface ID</label></td>
                <td style="width:90px;"><input type="text" name="txtLicsId" id="txtLicsId" /></td>
            </tr>
            <tr>
                <td><label for="ddlInterfaceGroup">Interface Group</label></td>
                <td colspan="3">@Html.DropDownList("ddlInterfaceGroup", Model.InterfaceGroups, new { id = "ddlInterfaceGroup", style="width:467px" })</td>
                <td><label for="txtEndDate">End Date/Time</label></td>
                <td><input type="text" name="txtEndDate" id="txtEndDate" class="date" />
                    <input type="text" id="txtEndTime" class="time" />
                </td>
                <td><label for="ddlPerPage">Per Page</label></td>
                <td>
                    <select id="ddlPerPage">
                        <option value="10">10</option>
                        <option value="15" selected="selected">15</option>
                        <option value="20">20</option>
                        <option value="30">30</option>
                        <option value="40">40</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                        <option value="150">150</option>
                        <option value="200">200</option>
                        <option value="250">250</option>
                    </select>
                </td>
            </tr>
            <tr>
                <td><label for="ddlInterface">Interface</label></td>
                <td colspan="3">@Html.DropDownList("ddlInterface", Model.Interfaces, new { id = "ddlInterface", style = "width:467px" })</td>
                <td></td>
                <td><input type="checkbox" id="chkAuto" /> <label for="chkAuto">Auto refresh</label></td>
                <td></td>
                <td><button type="button" id="btnFilter">Filter</button></td>
            </tr>
        </tbody>
    </table>
</div>
<div id="TableContainer">
</div>
<span class="footerOptions">
    <input type="checkbox" id="selectAll" />
    <label for="selectAll">Select all</label>&nbsp;&nbsp;&nbsp;
    <button id="btnReprocess">Reprocess</button>
</span>
<br />
<div id="dialogConfirm" style="display:none;">
    <p id="confirmText">Are you sure you want to reprocess the selected interfaces?</p>
    <br />
    <center id="reprocesOptions">
        <button id="reprocess">Reprocess</button>
        &nbsp;
        &nbsp;
        <button id="cancel">Cancel</button>
    </center>
    <br />
</div>
<div id="dialogMessage" style="display:none;">
    <strong><p id="pMessage"></p></strong>
    <p id="pException"></p>
</div>