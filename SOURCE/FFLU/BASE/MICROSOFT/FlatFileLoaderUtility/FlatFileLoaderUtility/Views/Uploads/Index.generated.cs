#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlatFileLoaderUtility.Views.Uploads
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using FlatFileLoaderUtility.Models;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Uploads/Index.cshtml")]
    public partial class Index : System.Web.Mvc.WebViewPage<FlatFileLoaderUtility.ViewModels.FileUploadViewModel>
    {
        public Index()
        {
        }
        public override void Execute()
        {
            
            #line 3 "..\..\Views\Uploads\Index.cshtml"
  
    ViewBag.Title = "File Upload";

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n");

DefineSection("JavascriptImport", () => {

WriteLiteral("\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\r\n\r\n        /**************************************************\r\n        /* Page" +
" Variables\r\n        /**************************************************/\r\n      " +
"  var ustatus = null;\r\n        var fileData = null;\r\n        var inProgressInter" +
"faceCode = \"");

            
            #line 15 "..\..\Views\Uploads\Index.cshtml"
                                  Write(Model.InterfaceCode);

            
            #line default
            #line hidden
WriteLiteral("\";\r\n        var inProgressInterfaceName = \"");

            
            #line 16 "..\..\Views\Uploads\Index.cshtml"
                                  Write(Model.InterfaceName);

            
            #line default
            #line hidden
WriteLiteral("\";\r\n        var inProgressFileName = \"");

            
            #line 17 "..\..\Views\Uploads\Index.cshtml"
                             Write(Model.FileName);

            
            #line default
            #line hidden
WriteLiteral("\";\r\n        var inProgressFileSize = ");

            
            #line 18 "..\..\Views\Uploads\Index.cshtml"
                            Write(Model.FileSize);

            
            #line default
            #line hidden
WriteLiteral(";\r\n        var inProgressLastSegment = ");

            
            #line 19 "..\..\Views\Uploads\Index.cshtml"
                               Write(Model.LastSegment);

            
            #line default
            #line hidden
WriteLiteral(";\r\n        var inProgressReceivedLength = ");

            
            #line 20 "..\..\Views\Uploads\Index.cshtml"
                                  Write(Model.ReceivedStringLength);

            
            #line default
            #line hidden
WriteLiteral(";\r\n        var isResuming = false;\r\n        var doCancel = false;\r\n        var co" +
"ntinueMonitoring = true;\r\n        var compressionMode = 1;\r\n        var lzma = n" +
"ew LZMA(\"/scripts/lzma_worker.min.js\");\r\n\r\n        /****************************" +
"**********************\r\n        /* Document Ready\r\n        /********************" +
"******************************/\r\n        $(document).ready(function () {\r\n      " +
"      // Plugin instantiation\r\n            $(\"#ddlInterfaceGroup\").chosen({ sear" +
"ch_contains: true });\r\n            $(\"#ddlInterface\").chosen({ search_contains: " +
"true });\r\n\r\n            // Event Listeners\r\n            $(\"#ddlInterfaceGroup\")." +
"change(function () {\r\n                GetInterfaceOptions($(this).val(), \"*INBOU" +
"ND\", $(\"#ddlInterface\"), true, false);\r\n            });\r\n\r\n            $(\"#ddlIn" +
"terface\").change(function () {\r\n                $(\"#tdFileType\").html(\"\");\r\n\r\n  " +
"              if ($(this).val() == \"\")\r\n                    return;\r\n\r\n         " +
"       $.ajax({\r\n                    type: \"post\",\r\n                    url: \"/B" +
"ase/GetInterfaceDetails\",\r\n                    data: {\r\n                        " +
"interfaceCode: $(this).val()\r\n                    },\r\n                    async:" +
" true,\r\n                    success: function (response) {\r\n                    " +
"    if (response.Result != \"OK\") {\r\n                            $(\"#tdFileType\")" +
".html(response.Message);\r\n                        }\r\n                        els" +
"e {\r\n                            $(\"#tdFileType\").html(\"Expected file type: <str" +
"ong>\" + response.Data.FileType + \"</strong>\" + ((response.Data.FileType == \"csv\"" +
" || response.Data.FileType == \"tab\") ? \", and qualifier: <strong>\" + response.Da" +
"ta.CsvQualifier + \"</strong>\" : \"\"));\r\n                        }\r\n              " +
"      },\r\n                    error: function (xhr, ajaxOptions, thrownError) {\r" +
"\n                        $(\"#tdFileType\").html(\"Expected file type for this inte" +
"rface could not be determined\");\r\n                    }\r\n                });\r\n  " +
"          });\r\n\r\n            $(\"#validationForm\").validationEngine(\"attach\", {\r\n" +
"                prettySelect : true,\r\n                useSuffix: \"_chzn\"\r\n      " +
"      });\r\n\r\n            $(\"#file\").change(function () {\r\n                $(\"#fa" +
"kefile\").val($(\"#file\").val().replace(/C:\\\\fakepath\\\\/i, \'\'));\r\n                " +
"fileData = this.files[0];\r\n            });\r\n\r\n            $(\"#fakefile\").click(f" +
"unction () {\r\n                $(\"#file\").click();\r\n                return false;" +
"\r\n            });\r\n\r\n            $(\"#fakefileButton\").click(function () {\r\n     " +
"           $(\"#file\").click();\r\n                return false;\r\n            });\r\n" +
"\r\n            $(\"#upload\").click(function () {\r\n                // Validate inpu" +
"ts\r\n                // This will ensure that both an interface and a file have b" +
"een selected\r\n                if (!$(\"#validationForm\").validationEngine(\"valida" +
"te\"))\r\n                    return false;\r\n\r\n                // Instantiate a Sta" +
"tus object to hold the upload state\r\n                ustatus = new UStatus();\r\n " +
"               ustatus.InterfaceCode = $(\"#ddlInterface\").val();\r\n              " +
"  ustatus.FilePath = $(\"#file\").val().replace(/C:\\\\fakepath\\\\/i, \'\');\r\n         " +
"       ustatus.FileName = ustatus.FilePath.split(\"\\\\\").pop();\r\n                u" +
"status.SegmentBytes = ");

            
            #line 98 "..\..\Views\Uploads\Index.cshtml"
                                  Write(Model.SegmentBytes);

            
            #line default
            #line hidden
WriteLiteral(";\r\n                ustatus.MinCompressionBytes = ");

            
            #line 99 "..\..\Views\Uploads\Index.cshtml"
                                         Write(Model.MinCompressionBytes);

            
            #line default
            #line hidden
WriteLiteral(";\r\n                ustatus.MaxCompressionBytes = ");

            
            #line 100 "..\..\Views\Uploads\Index.cshtml"
                                         Write(Model.MaxCompressionBytes);

            
            #line default
            #line hidden
WriteLiteral(";\r\n                ustatus.StartCompressionBytes = ");

            
            #line 101 "..\..\Views\Uploads\Index.cshtml"
                                           Write(Model.StartCompressionBytes);

            
            #line default
            #line hidden
WriteLiteral(";\r\n                ustatus.MaxCompressedSegmentsPerRequest = ");

            
            #line 102 "..\..\Views\Uploads\Index.cshtml"
                                                     Write(Model.MaxCompressedSegmentsPerRequest);

            
            #line default
            #line hidden
WriteLiteral(";\r\n                ustatus.CompressionStep = ");

            
            #line 103 "..\..\Views\Uploads\Index.cshtml"
                                     Write(Model.CompressionStep);

            
            #line default
            #line hidden
WriteLiteral(";\r\n                ustatus.SegmentBytesCurrent = ustatus.StartCompressionBytes;\r\n" +
"                ustatus.UseCompression = (ustatus.UseCompression && $(\"#compress" +
"Yes\").hasClass(\"option-selected\"));\r\n\r\n                // The filename cannot ex" +
"ceed 64 characters\r\n                if (ustatus.FileName.length > 64) {\r\n       " +
"             ustatus.Message = \"The filename cannot exceed 64 characters.\";\r\n   " +
"                 ustatus.IsError = true;\r\n                    ShowResult(true);\r" +
"\n                    return false;\r\n                }\r\n\r\n                // Init" +
"iate the upload.\r\n                // Browsers supporting HTML5 perform the file " +
"reading asynchronously\r\n                // So this is the last function that can" +
" be called from the upload click eventhandler\r\n                UploadInitiatePar" +
"t1();\r\n\r\n                return false;\r\n            });\r\n\r\n            $(\"#cance" +
"lUpload\").click(function () {\r\n                $(this).attr(\"disabled\", \"disable" +
"d\");\r\n                $(\"#uploadOptions\").hide();\r\n                doCancel = tr" +
"ue;\r\n                if (ustatus != null)\r\n                    ustatus.Compressi" +
"onTerminate = true;\r\n                return false;\r\n            });\r\n\r\n         " +
"   $(\"#cancel\").click(function () {\r\n                $(\"form :input\").attr(\"disa" +
"bled\", \"disabled\").trigger(\"liszt:updated\");\r\n                $(\"#resumeOptions\"" +
").hide();\r\n                $(\"#rowDescriptionResume\").show();\r\n                i" +
"f (ustatus == null)\r\n                    ustatus = new UStatus();\r\n             " +
"   UploadCancel(false);\r\n                return false;\r\n            });\r\n\r\n     " +
"       $(\"#resume\").click(function () {\r\n                $(\"#ddlInterface\").val(" +
"inProgressInterfaceCode);\r\n                $(\"#ddlInterface\").attr(\"disabled\", \"" +
"disabled\").trigger(\"liszt:updated\");\r\n                $(\"#ddlInterfaceGroup\").at" +
"tr(\"disabled\", \"disabled\").trigger(\"liszt:updated\");\r\n                $(\".ui-dia" +
"log-content\").dialog(\"destroy\");\r\n                $(\"#file\").click();\r\n         " +
"       isResuming = true;\r\n                return false;\r\n            });\r\n\r\n   " +
"         $(\"#useCompression li\").click(function () {\r\n                $(\"#useCom" +
"pression li\").removeClass(\"option-selected\");\r\n                $(this).addClass(" +
"\"option-selected\");\r\n            });\r\n\r\n            // Document ready actions\r\n " +
"           if (inProgressInterfaceCode != \"\") {\r\n                $(\"#dialogResum" +
"e\").dialog({\r\n                    modal: true\r\n                });\r\n            " +
"}\r\n            if (Modernizr.webworkers && $.QueryString[\"advanced\"]) {\r\n       " +
"         $(\"#rowCompression\").show();\r\n            } \r\n        });\r\n\r\n        /*" +
"*************************************************\r\n        /* Page Functions\r\n  " +
"      /**************************************************/\r\n        \r\n        //" +
" Called to cancel an upload\r\n        function UploadCancel(silentCancel) {\r\n    " +
"        var doSilentCancel = silentCancel;\r\n            $.ajax({\r\n              " +
"  type: \"post\",\r\n                url: \"/Uploads/Cancel\",\r\n                conten" +
"tType: \"application/json\",\r\n                async: true,\r\n                succes" +
"s: function (response) {\r\n                    if (doSilentCancel)\r\n             " +
"           return;\r\n                    if (response.Result != \"OK\") {\r\n        " +
"                ustatus.Message = \"Error while cancelling the upload.\";\r\n       " +
"                 ustatus.Exception = response.Message;\r\n                        " +
"ustatus.UploadId = response.UploadId;\r\n                        ustatus.LicsId = " +
"response.LicsId;\r\n                        ustatus.IsError = true;\r\n             " +
"           ShowResult(true);\r\n                    }\r\n                    else {\r" +
"\n                        ustatus.Message = \"Upload successfully cancelled.\";\r\n  " +
"                      ustatus.Exception = \"\";\r\n                        ShowResul" +
"t(true);\r\n                    }\r\n                },\r\n                error: func" +
"tion (xhr, ajaxOptions, thrownError) {\r\n                    if (doSilentCancel)\r" +
"\n                        return;\r\n                    ustatus.Message = \"Error c" +
"ommunicating with server.\";\r\n                    ustatus.Exception = (isTest) ? " +
"thrownError : \"\";\r\n                    ustatus.IsError = true;\r\n                " +
"    ShowResult(true);\r\n                }\r\n            });\r\n\r\n            doCance" +
"l = false;\r\n        }\r\n\r\n        // Called to initiate an upload. Split into 2 p" +
"arts to support async file read on modern browsers (done here to support async c" +
"ompression).\r\n        function UploadInitiatePart1() {\r\n            // First, di" +
"sable the form so that the user can\'t click the button again\r\n            $(\"for" +
"m :input:not(#cancelUpload)\").attr(\"disabled\", \"disabled\").trigger(\"liszt:update" +
"d\");\r\n\r\n            if (isResuming && ustatus.FileName != inProgressFileName) {\r" +
"\n                ustatus.Message = \"Filename does not match. Cannot resume witho" +
"ut the same file.\";\r\n                ustatus.Exception = \"\";\r\n                us" +
"tatus.IsError = true;\r\n                ShowResult(true);\r\n                return" +
";\r\n            }\r\n            if (isResuming && fileData != null && fileData.siz" +
"e != inProgressFileSize) {\r\n                ustatus.Message = \"File size does no" +
"t match original upload. Cannot resume without the same file.\";\r\n               " +
" ustatus.Exception = \"\";\r\n                ustatus.IsError = true;\r\n             " +
"   ShowResult(true);\r\n                return;\r\n            }\r\n\r\n            // T" +
"hen, show the progress indicator\r\n            $(\"#spanInterface\").text($(\"#ddlIn" +
"terface option:selected\").text());\r\n            $(\"#spanFilename\").text(ustatus." +
"FileName);\r\n            if (fileData != null) {\r\n                ustatus.FileSiz" +
"e = fileData.size;\r\n                $(\"#spanFilesize\").text(addCommas(parseInt(M" +
"ath.ceil(parseFloat(ustatus.FileSize)/1024))) + \" kB\");\r\n            }\r\n        " +
"    $(\"#uploadOptions\").show();\r\n            $(\"#divResult\").hide();\r\n          " +
"  $(\"#step1tick\").hide();\r\n            $(\"#step2tick\").hide();\r\n            $(\"#" +
"step3tick\").hide();\r\n            $(\"#step4tick\").hide();\r\n            $(\"#step5t" +
"ick\").hide();\r\n            $(\"#step4time\").hide();\r\n            $(\"#step5time\")." +
"hide();\r\n            $(\".failure\").hide();\r\n            $(\".success\").hide();\r\n " +
"           $(\".failureProgress\").removeClass(\"failureProgress\");\r\n            $(" +
"\".successProgress\").removeClass(\"successProgress\");\r\n            SetProgressDesc" +
"ription(\"Step 1 - Initialising upload\");\r\n\r\n            $(\"#dialog\").dialog({\r\n " +
"               modal: true,\r\n                height: \"auto\",\r\n                cl" +
"ose: function (event, ui) {\r\n                    continueMonitoring = false;\r\n  " +
"              },\r\n                buttons: {}\r\n            });\r\n            $(\"#" +
"progressbar\").progressbar({\r\n                value: 0\r\n            });\r\n        " +
"    \r\n            continueMonitoring = true;\r\n\r\n            var fr = new FileRea" +
"der();\r\n            fr.onload = function (e) {\r\n                ustatus.Remainde" +
"r = e.target.result;\r\n                ustatus.TotalLength = ustatus.Remainder.le" +
"ngth;\r\n\r\n                if (isResuming && inProgressReceivedLength > 0) {\r\n    " +
"                ustatus.Remainder = ustatus.Remainder.substr(inProgressReceivedL" +
"ength);\r\n                }\r\n                if (ustatus.Remainder.length <= usta" +
"tus.MinCompressionBytes) {\r\n                    ustatus.UseCompression = false;\r" +
"\n                }\r\n                if (ustatus.UseCompression) {\r\n             " +
"       ProcessCompression();\r\n                }\r\n                UploadInitiateP" +
"art2();\r\n            };\r\n            fr.readAsText(fileData, \"UTF-8\");\r\n        " +
"}\r\n\r\n        // Called to initiate an upload. Split into 2 parts to support asyn" +
"c file read on modern browsers (done here to support async compression).\r\n      " +
"  function UploadInitiatePart2() {\r\n            // Now initiate the upload\r\n    " +
"        // This will also confirm that the correct filetype has been selected fo" +
"r the given interface\r\n            if (!isResuming) {\r\n                $.ajax({\r" +
"\n                    type: \"post\",\r\n                    url: \"/Uploads/Start\",\r\n" +
"                    contentType: \"application/json\",\r\n                    data: " +
"JSON.stringify({\r\n                        interfaceCode: ustatus.InterfaceCode,\r" +
"\n                        filename: ustatus.FileName\r\n                    }),\r\n  " +
"                  async: true,\r\n                    success: function (response)" +
" {\r\n                        if (response.Result != \"OK\") {\r\n                    " +
"        ustatus.IsError = true;\r\n                            ustatus.Message = \"" +
"Error starting the upload.\";\r\n                            ustatus.Exception = re" +
"sponse.Message;\r\n                            ShowResult(false);\r\n               " +
"         }\r\n                        else {\r\n                            UploadIn" +
"itiateCallback();\r\n                        }\r\n                    },\r\n          " +
"          error: function (xhr, ajaxOptions, thrownError) {\r\n                   " +
"     ustatus.IsError = true;\r\n                        ustatus.Message = \"Error c" +
"ommunicating with server.\";\r\n                        ustatus.Exception = (isTest" +
") ? thrownError : \"\";\r\n                        ShowResult(false);\r\n             " +
"       }\r\n                });\r\n            }\r\n            else {\r\n              " +
"  UploadInitiateCallback();\r\n            }\r\n        }\r\n\r\n        function SetPro" +
"gressDescription(description) {\r\n            $(\"#progressText\").text(description" +
");\r\n        }\r\n\r\n        // Callback function for initiating an upload\r\n        " +
"function UploadInitiateCallback() {\r\n            ustatus.CurrentStep++;\r\n       " +
"     $(\"#step1tick\").show();\r\n            SetProgressDescription(\"Step 2 - Uploa" +
"ding data\");\r\n\r\n            // Next, start uploading the segments.\r\n            " +
"if (ustatus.TotalLength == 0) {\r\n                SetNoMoreSegments();\r\n         " +
"   }\r\n            else {\r\n                ProcessSegment();\r\n            }\r\n    " +
"    }\r\n\r\n        // Called to process a file segment. Called iteratively until f" +
"ile is fully processed\r\n        function ProcessSegment()\r\n        {\r\n          " +
"  if (doCancel) {\r\n                SetProgressDescription(\"Cancelling upload\");\r" +
"\n                UploadCancel(false);\r\n            }\r\n            else if (ustat" +
"us.UseCompression || ustatus.Segments.length > 0) {\r\n                if (ustatus" +
".IsError) {\r\n                    UploadCancel(true);\r\n                    ShowRe" +
"sult(false);\r\n                    return;\r\n                }\r\n                if" +
" (ustatus.CompressionFinished && ustatus.Segments.length == 0) {\r\n              " +
"      UploadMonitor();\r\n                }\r\n                else if (ustatus.Segm" +
"ents.length > 0) {\r\n                    ustatus.TimeWaiting = 0;\r\n              " +
"      ustatus.SegmentCount++;\r\n                    $(\"#progressbar\").progressbar" +
"(\"value\", ustatus.Segments[Math.min(ustatus.Segments.length, ustatus.MaxCompress" +
"edSegmentsPerRequest) - 1].ProcessedLength * 100 / ustatus.TotalLength);\r\n      " +
"              UploadSegment(ustatus.Segments, ustatus.CompressionFinished);\r\n   " +
"             }\r\n                else {\r\n                    // The first time sp" +
"ent waiting after initialisation or resuming doesn\'t count.\r\n                   " +
" if (ustatus.SegmentCount > 0)\r\n                        ustatus.TimeWaiting += 1" +
"25;\r\n                    setTimeout(\"ProcessSegment();\", 125);\r\n                " +
"}\r\n            }\r\n            else {\r\n                if (ustatus.Remainder.leng" +
"th == 0) {\r\n                    // The upload phase is complete, now monitor the" +
" progress\r\n                    UploadMonitor();\r\n                }\r\n            " +
"    else {\r\n                    while (ustatus.Remainder.length > 0) {\r\n        " +
"                if (ustatus.Remainder.length > ustatus.SegmentBytes - ustatus.Ma" +
"xRowSize - 10) {\r\n                            var index = ustatus.SegmentBytes -" +
" ustatus.MaxRowSize - 10;\r\n                            while (index < ustatus.Re" +
"mainder.length && ustatus.Remainder[index] != \"\\n\") {\r\n                         " +
"       index++;\r\n                                if (index > ustatus.SegmentByte" +
"s) {\r\n                                    // The line exceeds the maximum line l" +
"ength. Terminate upload process.\r\n                                    ustatus.Is" +
"Error = true;\r\n                                    ustatus.Message = \"End of lin" +
"e not found within maximum line length.\";\r\n                                    u" +
"status.Exception = \"Please check line length and end of line encoding in the fil" +
"e.\";\r\n                                    UploadCancel(true);\r\n                 " +
"                   ShowResult(false);\r\n                                    retur" +
"n;\r\n                                }\r\n                            }\r\n          " +
"                  index++;\r\n                            segment = ustatus.Remain" +
"der.substring(0, index);\r\n                            ustatus.Remainder = ustatu" +
"s.Remainder.substr(index);\r\n                        }\r\n                        e" +
"lse {\r\n                            segment = ustatus.Remainder;\r\n               " +
"             ustatus.Remainder = \"\";\r\n                        }\r\n               " +
"         \r\n                        ustatus.ProcessedLength = ustatus.TotalLength" +
" - ustatus.Remainder.length;\r\n                        $(\"#progressbar\").progress" +
"bar(\"value\", ustatus.ProcessedLength * 100 / ustatus.TotalLength);\r\n\r\n          " +
"              UploadSegment(segment, ustatus.Remainder.length <= 0);\r\n          " +
"              return;\r\n                    }\r\n                    // this is for" +
" the case where a file is resumed after the last segment is actually uploaded\r\n " +
"                   UploadMonitor();\r\n                }\r\n            }\r\n        }" +
"\r\n\r\n        // Compresses all the file, segment by segment\r\n        function Pro" +
"cessCompression() {\r\n\r\n            if (ustatus.CompressionTerminate)\r\n          " +
"      return;\r\n\r\n            while (ustatus.Remainder.length > 0) {\r\n           " +
"     var doCompress = true;\r\n                if (ustatus.Segments.length >= 2 &&" +
" ustatus.SegmentBytesCurrent < ustatus.MaxCompressionBytes) {\r\n                 " +
"   ustatus.SegmentBytesCurrent += ustatus.CompressionStep;\r\n                }\r\n " +
"               else if (ustatus.TimeWaiting > 0 && ustatus.SegmentBytesCurrent >" +
" ustatus.StartCompressionBytes) {\r\n                    ustatus.SegmentBytesCurre" +
"nt -= ustatus.CompressionStep;\r\n                }\r\n                else if (usta" +
"tus.TimeWaiting > 0 && !$(\"#rowCompression\").is(\":visible\")) {\r\n                " +
"    // The uploader is waiting for data even on the minimum compression step, sk" +
"ip compression on a segment\r\n                    // Test if it is going to be be" +
"tter to turn off compression\r\n                    if (ustatus.TotalCompressionSe" +
"gs > 0 && ustatus.TotalUploadSegs > 0) {\r\n                        var averageCom" +
"pressionTime = ustatus.TotalCompressionTime / ustatus.TotalCompressionSegs;\r\n   " +
"                     var averageUploadTime = ustatus.TotalUploadTime / ustatus.T" +
"otalUploadSegs;\r\n                        if (averageCompressionTime > averageUpl" +
"oadTime) {\r\n                            ustatus.UseCompression = false;\r\n       " +
"                     return;\r\n                        }\r\n                    }\r\n" +
"                    doCompress = false;\r\n                    ustatus.TimeWaiting" +
" = 0;\r\n                }\r\n                var wantedBytes = (doCompress) ? ustat" +
"us.SegmentBytesCurrent : ustatus.SegmentBytes;\r\n                if (ustatus.Rema" +
"inder.length > wantedBytes - ustatus.MaxRowSize - 10) {\r\n                    var" +
" index = wantedBytes - ustatus.MaxRowSize - 10;\r\n                    while (inde" +
"x < ustatus.Remainder.length && ustatus.Remainder[index] != \"\\n\") {\r\n           " +
"             index++;\r\n                        if (index > wantedBytes) {\r\n     " +
"                       // The line exceeds the maximum line length. Terminate up" +
"load process.\r\n                            ustatus.IsError = true;\r\n            " +
"                ustatus.Message = \"End of line not found within maximum line len" +
"gth.\";\r\n                            ustatus.Exception = \"Please check line lengt" +
"h and end of line encoding in the file.\";\r\n                            return;\r\n" +
"                        }\r\n                    }\r\n                    index++;\r\n" +
"                    segment = ustatus.Remainder.substring(0, index);\r\n          " +
"          ustatus.Remainder = ustatus.Remainder.substr(index);\r\n                " +
"}\r\n                else {\r\n                    segment = ustatus.Remainder;\r\n   " +
"                 ustatus.Remainder = \"\";\r\n                }\r\n\r\n                i" +
"f (!doCompress) {\r\n                    // Compression isn\'t keeping up with the " +
"connection\'s demand for data\r\n                    // Send through an uncompresse" +
"d segment\r\n                    var seg = new Segment();\r\n                    seg" +
".StringData = segment;\r\n                    seg.ProcessedLength = ustatus.TotalL" +
"ength - ustatus.Remainder.length;\r\n                    seg.IsFinalSegment = usta" +
"tus.Remainder.length <= 0;\r\n                    ustatus.Segments.push(seg);\r\n   " +
"                 ProcessCompression();\r\n                }\r\n                else " +
"{\r\n                    var startTime = new Date();\r\n                    lzma.com" +
"press(segment, compressionMode, function on_compress_complete(result) {\r\n       " +
"                 if (result === false) {\r\n                            // Somethi" +
"ng went wrong with the compression\r\n                            // Add the segme" +
"nt back to the remainder to process, and switch to uncompressed mode\r\n          " +
"                  ustatus.Remainder = segment + ustatus.Remainder;\r\n            " +
"                ustatus.UseCompression = false;\r\n                            ret" +
"urn;\r\n                        }\r\n                        var seg = new Segment()" +
";\r\n                        seg.ByteArray = result;\r\n                        seg." +
"ProcessedLength = ustatus.TotalLength - ustatus.Remainder.length;\r\n             " +
"           seg.IsFinalSegment = ustatus.Remainder.length <= 0;\r\n                " +
"        ustatus.Segments.push(seg);\r\n                        ustatus.TotalCompre" +
"ssionTime += (new Date() - startTime);\r\n                        ustatus.TotalCom" +
"pressionSegs += (ustatus.SegmentBytesCurrent / ustatus.SegmentBytes);\r\n         " +
"               ProcessCompression();\r\n                    });\r\n                }" +
"\r\n                return;\r\n            }\r\n\r\n            ustatus.CompressionFinis" +
"hed = true;\r\n        }\r\n\r\n        // Called to upload segment to server\r\n       " +
" function UploadSegment(segmentData, isFinalSegment) {\r\n\r\n            var postDa" +
"ta = null;\r\n            var url = \"/Uploads/Segment\";\r\n            var usingComp" +
"ression = ustatus.UseCompression || (ustatus.Segments.length > 0);\r\n\r\n          " +
"  if (usingCompression && ustatus.Segments.length > 0 && ustatus.Segments[0].Str" +
"ingData != \"\") {\r\n                // The first segment in the queue is not compr" +
"essed (happens when compression isn\'t keeping up with connection throughput)\r\n  " +
"              usingCompression = false;\r\n                segmentData = ustatus.S" +
"egments[0].StringData;\r\n                isFinalSegment = ustatus.Segments[0].IsF" +
"inalSegment;\r\n                ustatus.Segments.splice(0, 1);\r\n            }\r\n\r\n " +
"           if (usingCompression) {\r\n                postData = new FormData();\r\n" +
"                var isFinal = false;\r\n                var includedInUpload = 0;\r" +
"\n                for (var i = 0; i < Math.min(segmentData.length, ustatus.MaxCom" +
"pressedSegmentsPerRequest); i++) {\r\n                    var seg = segmentData[i]" +
";\r\n                    if (seg.StringData != \"\")\r\n                        break;" +
"\r\n                    includedInUpload = i + 1;\r\n                    var arry = " +
"new Int8Array(seg.ByteArray);\r\n                    var oBlob = null;\r\n          " +
"          try {\r\n                        oBlob = new Blob([arry.buffer], { type:" +
" \"application/octet-stream\" });\r\n                    } catch (e) {\r\n            " +
"            // The BlobBuilder API has been deprecated in favour of Blob, but ol" +
"der\r\n                        // browsers don\'t know about the Blob constructor\r\n" +
"                        var bb = new (window.WebKitBlobBuilder || window.MozBlob" +
"Builder);\r\n                        bb.append(arry.buffer);\r\n                    " +
"    oBlob = bb.getBlob(\"application/octet-stream\");\r\n                    }\r\n    " +
"                isFinal = seg.IsFinalSegment;\r\n                    postData.appe" +
"nd(\"data\" + i, oBlob);\r\n                }\r\n                // Clear the processe" +
"d segments from the queue\r\n                ustatus.Segments.splice(0, includedIn" +
"Upload);\r\n                url = \"/Uploads/SegmentCompressed?interfaceCode=\" + us" +
"tatus.InterfaceCode + \"&isFinalSegment=\" + isFinal + \"&fileSize=\" + ustatus.File" +
"Size + \"&fileName=\" + encodeURIComponent(ustatus.FileName);\r\n            }\r\n    " +
"        else {\r\n                postData = JSON.stringify({\r\n                   " +
" interfaceCode: ustatus.InterfaceCode,\r\n                    filename: ustatus.Fi" +
"leName,\r\n                    segmentData: segmentData,\r\n                    isFi" +
"nalSegment: isFinalSegment,\r\n                    fileSize: ustatus.FileSize\r\n   " +
"             });\r\n            }\r\n            \r\n            var startTime = new D" +
"ate();\r\n            $.ajax({\r\n                type: \"post\",\r\n                url" +
": url,\r\n                contentType: usingCompression ? false : \"application/jso" +
"n\",\r\n                processData: !usingCompression,\r\n                data: post" +
"Data,\r\n                async: true,\r\n                success: function (response" +
") {\r\n                    if (response.Result != \"OK\") {\r\n                       " +
" ustatus.IsError = true;\r\n                        ustatus.Message = \"Error while" +
" uploading file segment.\"\r\n                        ustatus.Exception = response." +
"Message;\r\n                        ustatus.UploadId = response.UploadId;\r\n       " +
"                 ustatus.LicsId = response.LicsId;\r\n                        Show" +
"Result(false);\r\n                    }\r\n                    else {\r\n             " +
"           if (!usingCompression) {\r\n                            ustatus.TotalUp" +
"loadTime += (new Date() - startTime);\r\n                            ustatus.Total" +
"UploadSegs += 1;\r\n                        }\r\n                        ProcessSegm" +
"ent();\r\n                    }\r\n                },\r\n                error: functi" +
"on (xhr, ajaxOptions, thrownError) {\r\n                    ustatus.IsError = true" +
";\r\n                    ustatus.Message = \"Error communicating with server.\";\r\n  " +
"                  ustatus.Exception = (isTest) ? thrownError : \"\";\r\n            " +
"        ShowResult(false);\r\n                }\r\n            });\r\n        }\r\n\r\n   " +
"     // Called to indicate that there will be no more segments uploaded\r\n       " +
" // Used only when the uploaded file has a size of 0 bytes\r\n        function Set" +
"NoMoreSegments() {\r\n            $.ajax({\r\n                type: \"post\",\r\n       " +
"         url: \"/Uploads/SetNoMoreSegments\",\r\n                contentType: \"appli" +
"cation/json\",\r\n                data: JSON.stringify({\r\n                    inter" +
"faceCode: ustatus.InterfaceCode,\r\n                    filename: ustatus.FileName" +
"\r\n                }),\r\n                async: true,\r\n                success: fu" +
"nction (response) {\r\n                    if (response.Result != \"OK\") {\r\n       " +
"                 ustatus.IsError = true;\r\n                        ustatus.Messag" +
"e = \"Error while setting file upload complete.\"\r\n                        ustatus" +
".Exception = response.Message;\r\n                        ustatus.UploadId = respo" +
"nse.UploadId;\r\n                        ustatus.LicsId = response.LicsId;\r\n      " +
"                  ShowResult(false);\r\n                    }\r\n                   " +
" else {\r\n                        UploadMonitor();\r\n                    }\r\n      " +
"          },\r\n                error: function (xhr, ajaxOptions, thrownError) {\r" +
"\n                    ustatus.IsError = true;\r\n                    ustatus.Messag" +
"e = \"Error communicating with server.\";\r\n                    ustatus.Exception =" +
" (isTest) ? thrownError : \"\";\r\n                    ShowResult(false);\r\n         " +
"       }\r\n            });\r\n        }\r\n\r\n        // Called to show the result of " +
"an operation\r\n        function ShowResult(useNewDialog) {\r\n            // Re-ena" +
"ble the form underneath the dialog\r\n            if (!ustatus.IsError) {\r\n       " +
"         $(\"#ddlInterface\").val(\"\").change();\r\n                $(\"#fakefile\").va" +
"l(\"\");\r\n                resetFormElement($(\"#file\"));\r\n            }\r\n          " +
"  $(\"form :input\").removeAttr(\"disabled\").trigger(\"liszt:updated\");\r\n           " +
" \r\n            if (useNewDialog) {\r\n                // Remove any existing progr" +
"ess bars or dialog windows\r\n                $(\".ui-progressbar\").progressbar(\"de" +
"stroy\");\r\n                $(\".ui-dialog-content\").dialog(\"destroy\");\r\n\r\n        " +
"        // Set the message an exception text\r\n                $(\"#pMessage\").tex" +
"t(ustatus.Message);\r\n                if (ustatus.Exception != \"\") {\r\n           " +
"         $(\"#pException\").text(ustatus.Exception);\r\n                    $(\"#pExc" +
"eption\").show();\r\n                }\r\n                else {\r\n                   " +
" $(\"#pException\").hide();\r\n                }\r\n\r\n                // Show the dial" +
"og\r\n                $(\"#dialogMessage\").dialog({\r\n                    modal: tru" +
"e,\r\n                    title: (ustatus.IsError) ? \"Error\" : \"Message\",\r\n       " +
"             buttons: {\r\n                        Ok: function() {\r\n             " +
"               $(this).dialog(\"close\");\r\n                        }\r\n            " +
"        }\r\n                });\r\n            }\r\n            else {\r\n             " +
"   $(\"#divResult\").show();\r\n                $(\"#uploadOptions\").hide();\r\n\r\n     " +
"           $(\"#result\").text(ustatus.Message);\r\n                if (ustatus.Exce" +
"ption != \"\") {\r\n                    $(\"#pException2\").text(ustatus.Exception);\r\n" +
"                    $(\"#pException2\").show();\r\n                }\r\n              " +
"  else {\r\n                    $(\"#pException2\").hide();\r\n                }\r\n\r\n  " +
"              // Show the upload id if available and if in test mode\r\n          " +
"      if (isTest && ustatus.UploadId > 0) {\r\n                    $(\"#rowUploadId" +
"\").show();\r\n                    $(\"#uploadId\").text(ustatus.UploadId);\r\n        " +
"        }\r\n                else {\r\n                    $(\"#rowUploadId\").hide();" +
"\r\n                }\r\n\r\n                // Show the LICS id if it is available\r\n " +
"               if (ustatus.LicsId > 0) {\r\n                    $(\"#rowLicsId\").sh" +
"ow();\r\n                    $(\"#licsId\").text(ustatus.LicsId);\r\n                 " +
"   $(\"#rowInterfaceErrors\").show();\r\n                    $(\"#interfaceErrorCount" +
"\").text(ustatus.InterfaceErrorCount);\r\n                    $(\"#rowRowErrors\").sh" +
"ow();\r\n                    $(\"#rowErrorCount\").text(ustatus.RowErrorCount);\r\n   " +
"                 $(\"#rowDetails\").show();\r\n                    $(\"#detailsLink\")" +
".attr(\"href\", \"/Monitor/View/\" + ustatus.LicsId);\r\n                }\r\n          " +
"      else {\r\n                    $(\"#rowLicsId\").hide();\r\n                    $" +
"(\"#rowInterfaceErrors\").hide();\r\n                    $(\"#rowRowErrors\").hide();\r" +
"\n                    $(\"#rowDetails\").hide();\r\n                }\r\n\r\n            " +
"    $(\"#progressbar\").progressbar(\"value\", 100);\r\n                if (ustatus.Is" +
"Error) {\r\n                    $(\"#progressbar > div\").addClass(\"failureProgress\"" +
");\r\n                    $(\".failure\").show();\r\n                }\r\n              " +
"  else {\r\n                    $(\"#progressbar > div\").addClass(\"successProgress\"" +
");\r\n                    $(\".success\").show();\r\n                }\r\n\r\n            " +
"    $(\"#dialog\").dialog({\r\n                    buttons: {\r\n                     " +
"   Ok: function() {\r\n                            $(this).dialog(\"close\");\r\n     " +
"                   }\r\n                    }\r\n                });\r\n              " +
"  $(\"#dialog\").dialog(\"option\", \"position\", \"center\");\r\n            }\r\n\r\n       " +
"     ustatus.CompressionTerminate = true;\r\n        }\r\n\r\n        // Called to mon" +
"itor the status of an ongoing upload after all segments have been sent to the se" +
"rver\r\n        function UploadMonitor() {\r\n            \r\n            // Poll the " +
"status and update the display until it\'s finished\r\n            \r\n            if " +
"(ustatus.IsError || !continueMonitoring)\r\n                return;\r\n            \r" +
"\n            $(\"#uploadOptions\").hide();\r\n\r\n            $.ajax({\r\n              " +
"  type: \"post\",\r\n                url: \"/Uploads/GetStatus\",\r\n                con" +
"tentType: \"application/json\",\r\n                async: true,\r\n                suc" +
"cess: function (response) {\r\n                    if (response.Result != \"OK\") {\r" +
"\n                        ustatus.IsError = true;\r\n                        ustatu" +
"s.Message = \"Error while monitoring upload ustatus.\"\r\n                        us" +
"tatus.Exception = response.Message;\r\n                        ustatus.UploadId = " +
"response.UploadId;\r\n                        ustatus.LicsId = response.LicsId;\r\n " +
"                       ShowResult(false);\r\n                    }\r\n              " +
"      else {\r\n\r\n                        ustatus.CurrentStep = response.CurrentSt" +
"ep;\r\n                        if (response.Total > 0 && response.Current > 0)\r\n  " +
"                          $(\"#progressbar\").progressbar(\"value\", response.Curren" +
"t * 100 / response.Total);\r\n\r\n                        // It can be a long time o" +
"n \"0\" progress...\r\n                        // To let the user know that stuff is" +
" still happening, if it\'s 0 just increment the progressbar\r\n                    " +
"    if (response.Current == 0 && ustatus.CurrentStep > 3) {\r\n                   " +
"         var currentValue = $(\"#progressbar\").progressbar(\"value\");\r\n           " +
"                 currentValue = (currentValue == 100 || isNaN(currentValue)) ? 0" +
" : currentValue + 5;\r\n                            $(\"#progressbar\").progressbar(" +
"\"value\", currentValue);\r\n                        }\r\n\r\n                        sw" +
"itch(ustatus.CurrentStep) {\r\n                            case 3:\r\n              " +
"                  $(\"#step2tick\").show();\r\n                                SetPr" +
"ogressDescription(\"Step 3 - Completing data upload\");\r\n                         " +
"       break;\r\n                            case 4:\r\n                            " +
"    $(\"#step2tick\").show();\r\n                                $(\"#step3tick\").sho" +
"w();\r\n                                $(\"#step4time\").show();\r\n                 " +
"               $(\"#step4time\").text(response.EstimatedTime);\r\n                  " +
"              // From here, the user is free to upload another file, so re-enabl" +
"e the form\r\n                                $(\"form :input\").removeAttr(\"disable" +
"d\").trigger(\"liszt:updated\");\r\n                                SetProgressDescri" +
"ption(\"Step 4 - Uploading to ICS\");\r\n                                break;\r\n   " +
"                         case 5:\r\n                                $(\"#step2tick\"" +
").show();\r\n                                $(\"#step3tick\").show();\r\n            " +
"                    $(\"#step4tick\").show();\r\n                                $(\"" +
"#step4time\").hide();\r\n                                $(\"#step5time\").show();\r\n " +
"                               $(\"#step5time\").text(response.EstimatedTime);\r\n  " +
"                              SetProgressDescription(\"Step 5 - Processing in ICS" +
"\");\r\n                                break;\r\n                            default" +
":\r\n                                $(\"#spanDescription\").text(\"Unknown\");\r\n     " +
"                           break;\r\n                        }\r\n\r\n                " +
"        if (ustatus.CurrentStep == 5 && response.IsComplete == true) {\r\n        " +
"                    ustatus.InterfaceErrorCount = response.InterfaceErrorCount;\r" +
"\n                            ustatus.RowErrorCount = response.RowErrorCount;\r\n  " +
"                          ustatus.LicsId = response.LicsId;\r\n                   " +
"         ustatus.Exception = \"\";\r\n                            if (ustatus.Interf" +
"aceErrorCount == 0 && ustatus.RowErrorCount == 0) {\r\n                           " +
"     SetProgressDescription(\"File Load Completed Successfully\");\r\n              " +
"                  ustatus.Message = \"Success.\"\r\n                                " +
"ustatus.IsError = false;\r\n                            }\r\n                       " +
"     else {\r\n                                SetProgressDescription(\"File Load C" +
"omplete – with Errors\");\r\n                                ustatus.Message = \"Dat" +
"a Errors.\"\r\n                                ustatus.IsError = true;\r\n           " +
"                 }\r\n                            $(\"#step5time\").hide();\r\n       " +
"                     $(\"#step5tick\").show();\r\n                            ShowRe" +
"sult(false);\r\n                        }\r\n                        else {\r\n       " +
"                     // Wait a second before polling again\r\n                    " +
"        if (continueMonitoring)\r\n                                setTimeout(\"Upl" +
"oadMonitor();\", 1000);\r\n                        }\r\n                    }\r\n      " +
"          },\r\n                error: function (xhr, ajaxOptions, thrownError) {\r" +
"\n                    ustatus.IsError = true;\r\n                    ustatus.Messag" +
"e = \"Error communicating with server.\";\r\n                    ustatus.Exception =" +
" (isTest) ? thrownError : \"\";\r\n                    ShowResult(false);\r\n         " +
"       }\r\n            });\r\n        }\r\n\r\n    </script>\r\n");

});

WriteLiteral("\r\n<form");

WriteLiteral(" id=\"validationForm\"");

WriteLiteral(" action=\"Index\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"main upload\"");

WriteLiteral(">\r\n        <table");

WriteLiteral(" cellspacing=\"12\"");

WriteLiteral(">\r\n            <tr>\r\n                <td");

WriteLiteral(" style=\"width:120px;\"");

WriteLiteral("><label");

WriteLiteral(" for=\"ddlInterfaceGroup\"");

WriteLiteral(">Interface Group</label></td>\r\n                <td");

WriteLiteral(" style=\"width:480px;\"");

WriteLiteral(">");

            
            #line 827 "..\..\Views\Uploads\Index.cshtml"
                                    Write(Html.DropDownList("ddlInterfaceGroup", Model.InterfaceGroups, new { id = "ddlInterfaceGroup", style = "width:467px" }));

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                <td></td>\r\n            </tr>\r\n            <tr>\r\n          " +
"      <td><label");

WriteLiteral(" for=\"ddlInterface\"");

WriteLiteral(">Interface</label></td>\r\n                <td>");

            
            #line 832 "..\..\Views\Uploads\Index.cshtml"
               Write(Html.DropDownList("ddlInterface", Model.Interfaces, new { id = "ddlInterface", @class = "validate[required]", style = "width:467px" }));

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                <td");

WriteLiteral(" id=\"tdFileType\"");

WriteLiteral("></td>\r\n            </tr>\r\n            <tr>\r\n                <td><label");

WriteLiteral(" for=\"fakefile\"");

WriteLiteral(">File</label></td>\r\n                <td>\r\n                    <input");

WriteLiteral(" id=\"fakefile\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(" /> <button");

WriteLiteral(" id=\"fakefileButton\"");

WriteLiteral(">Browse...</button>\r\n                    <div");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral("><input");

WriteLiteral(" type=\"file\"");

WriteLiteral(" id=\"file\"");

WriteLiteral(" class=\"validate[required]\"");

WriteLiteral(" /></div>\r\n                </td>\r\n                <td></td>\r\n            </tr>\r\n " +
"           <tr");

WriteLiteral(" id=\"rowCompression\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(">\r\n                <td><label");

WriteLiteral(" for=\"useCompression\"");

WriteLiteral(">Compress</label></td>\r\n                <td>\r\n                    <ul");

WriteLiteral(" class=\"option-group\"");

WriteLiteral(" id=\"useCompression\"");

WriteLiteral(">\r\n                        <li");

WriteLiteral(" id=\"compressYes\"");

WriteLiteral(" class=\"option-selected\"");

WriteLiteral(">Yes</li>\r\n                        <li");

WriteLiteral(" id=\"compressNo\"");

WriteLiteral(">No</li>\r\n                    </ul>\r\n                </td>\r\n                <td><" +
"/td>\r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n          " +
"      <td><button");

WriteLiteral(" id=\"upload\"");

WriteLiteral(">Upload</button></td>\r\n                <td></td>\r\n            </tr>\r\n        </ta" +
"ble>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <div");

WriteLiteral(" id=\"dialog\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(">\r\n            <table");

WriteLiteral(" cellspacing=\"6\"");

WriteLiteral(" style=\"width:100%;\"");

WriteLiteral(">\r\n                <tr>\r\n                    <td");

WriteLiteral(" style=\"width:100px;\"");

WriteLiteral(">Connection</td>\r\n                    <td><strong>");

            
            #line 866 "..\..\Views\Uploads\Index.cshtml"
                            Write((ViewBag.Connection == null) ? string.Empty : ViewBag.Connection.ConnectionName);

            
            #line default
            #line hidden
WriteLiteral("</strong></td>\r\n                    <td");

WriteLiteral(" style=\"width:50px;\"");

WriteLiteral("></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Inte" +
"rface</td>\r\n                    <td><strong><span");

WriteLiteral(" id=\"spanInterface\"");

WriteLiteral("></span></strong></td>\r\n                    <td></td>\r\n                </tr>\r\n   " +
"             <tr>\r\n                    <td>ICS User</td>\r\n                    <t" +
"d><strong>");

            
            #line 876 "..\..\Views\Uploads\Index.cshtml"
                            Write((ViewBag.User == null) ? string.Empty : ViewBag.User.UserName);

            
            #line default
            #line hidden
WriteLiteral("</strong></td>\r\n                    <td></td>\r\n                </tr>\r\n           " +
"     <tr>\r\n                    <td>Filename</td>\r\n                    <td><stron" +
"g><span");

WriteLiteral(" id=\"spanFilename\"");

WriteLiteral("></span></strong></td>\r\n                    <td></td>\r\n                </tr>\r\n   " +
"             <tr>\r\n                    <td>Filesize</td>\r\n                    <t" +
"d><strong><span");

WriteLiteral(" id=\"spanFilesize\"");

WriteLiteral("></span></strong></td>\r\n                    <td></td>\r\n                </tr>\r\n   " +
"             <tr>\r\n                    <td>Step 1</td>\r\n                    <td>" +
"<strong>Initialising upload</strong></td>\r\n                    <td><div");

WriteLiteral(" id=\"step1tick\"");

WriteLiteral(" class=\"tick\"");

WriteLiteral("></div></td>\r\n                </tr>\r\n                <tr>\r\n                    <t" +
"d>Step 2</td>\r\n                    <td><strong>Uploading data</strong></td>\r\n   " +
"                 <td><div");

WriteLiteral(" id=\"step2tick\"");

WriteLiteral(" class=\"tick\"");

WriteLiteral("></div></td>\r\n                </tr>\r\n                <tr>\r\n                    <t" +
"d>Step 3</td>\r\n                    <td><strong>Completing data upload</strong></" +
"td>\r\n                    <td><div");

WriteLiteral(" id=\"step3tick\"");

WriteLiteral(" class=\"tick\"");

WriteLiteral("></div></td>\r\n                </tr>\r\n                <tr>\r\n                    <t" +
"d>Step 4</td>\r\n                    <td><strong>Uploading to ICS</strong></td>\r\n " +
"                   <td><div");

WriteLiteral(" id=\"step4tick\"");

WriteLiteral(" class=\"tick\"");

WriteLiteral("></div><div");

WriteLiteral(" id=\"step4time\"");

WriteLiteral("></div></td>\r\n                </tr>\r\n                <tr>\r\n                    <t" +
"d>Step 5</td>\r\n                    <td><strong>Processing in ICS</strong></td>\r\n" +
"                    <td><div");

WriteLiteral(" id=\"step5tick\"");

WriteLiteral(" class=\"tick\"");

WriteLiteral("></div><div");

WriteLiteral(" id=\"step5time\"");

WriteLiteral("></div></td>\r\n                </tr>\r\n            </table>\r\n            <br />\r\n  " +
"          <div");

WriteLiteral(" id=\"progress\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" id=\"progressbar\"");

WriteLiteral("></div>\r\n                <div");

WriteLiteral(" id=\"progressText\"");

WriteLiteral("></div>\r\n                <br />\r\n            </div>\r\n            <center");

WriteLiteral(" id=\"uploadOptions\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" id=\"cancelUpload\"");

WriteLiteral(">Cancel</button>\r\n            </center>\r\n            <div");

WriteLiteral(" id=\"divResult\"");

WriteLiteral(">\r\n                <table");

WriteLiteral(" cellspacing=\"6\"");

WriteLiteral(" style=\"width:100%;\"");

WriteLiteral(">\r\n                    <tr>\r\n                        <td><strong");

WriteLiteral(" id=\"result\"");

WriteLiteral("></strong></td>\r\n                        <td");

WriteLiteral(" style=\"width:50px;\"");

WriteLiteral(">\r\n                            <div");

WriteLiteral(" class=\"success\"");

WriteLiteral("></div>\r\n                            <div");

WriteLiteral(" class=\"failure\"");

WriteLiteral("></div>\r\n                        </td>\r\n                    </tr>\r\n              " +
"      <tr>\r\n                        <td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral("><p");

WriteLiteral(" id=\"pException2\"");

WriteLiteral("></p></td>\r\n                    </tr>\r\n                </table>\r\n                " +
"<table");

WriteLiteral(" cellspacing=\"6\"");

WriteLiteral(">\r\n                    <tr");

WriteLiteral(" id=\"rowUploadId\"");

WriteLiteral(">\r\n                        <td><strong>Upload ID</strong>:</td>\r\n                " +
"        <td");

WriteLiteral(" id=\"uploadId\"");

WriteLiteral("></td>\r\n                    </tr>\r\n                    <tr");

WriteLiteral(" id=\"rowLicsId\"");

WriteLiteral(">\r\n                        <td><strong>Interface ID</strong>:</td>\r\n             " +
"           <td");

WriteLiteral(" id=\"licsId\"");

WriteLiteral("></td>\r\n                    </tr>\r\n                    <tr");

WriteLiteral(" id=\"rowInterfaceErrors\"");

WriteLiteral(">\r\n                        <td><strong>Interface Errors</strong>:</td>\r\n         " +
"               <td");

WriteLiteral(" id=\"interfaceErrorCount\"");

WriteLiteral("></td>\r\n                    </tr>\r\n                    <tr");

WriteLiteral(" id=\"rowRowErrors\"");

WriteLiteral(">\r\n                        <td><strong>Row Errors</strong>:</td>\r\n               " +
"         <td");

WriteLiteral(" id=\"rowErrorCount\"");

WriteLiteral("></td>\r\n                    </tr>\r\n                    <tr");

WriteLiteral(" id=\"rowDetails\"");

WriteLiteral(">\r\n                        <td><strong>Details</strong>:</td>\r\n                  " +
"      <td><a");

WriteLiteral(" id=\"detailsLink\"");

WriteLiteral(">See interface details</a></td>\r\n                    </tr>\r\n                </tab" +
"le>\r\n            </div>\r\n        </div>\r\n        <div");

WriteLiteral(" id=\"dialogResume\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(">\r\n            <p>There is already an upload in progress for you on this connecti" +
"on:</p>\r\n            <table");

WriteLiteral(" cellspacing=\"8\"");

WriteLiteral(">\r\n                <tr>\r\n                    <td");

WriteLiteral(" style=\"width:100px;\"");

WriteLiteral(">Connection</td>\r\n                    <td><strong>");

            
            #line 966 "..\..\Views\Uploads\Index.cshtml"
                            Write((ViewBag.Connection == null) ? string.Empty : ViewBag.Connection.ConnectionName);

            
            #line default
            #line hidden
WriteLiteral("</strong></td>\r\n                </tr>\r\n                <tr>\r\n                    " +
"<td>Interface</td>\r\n                    <td><strong>");

            
            #line 970 "..\..\Views\Uploads\Index.cshtml"
                           Write(Model.InterfaceName);

            
            #line default
            #line hidden
WriteLiteral("</strong></td>\r\n                </tr>\r\n                <tr>\r\n                    " +
"<td>ICS User</td>\r\n                    <td><strong>");

            
            #line 974 "..\..\Views\Uploads\Index.cshtml"
                            Write((ViewBag.User == null) ? string.Empty : ViewBag.User.UserName);

            
            #line default
            #line hidden
WriteLiteral("</strong></td>\r\n                </tr>\r\n                <tr>\r\n                    " +
"<td>Filename</td>\r\n                    <td><strong>");

            
            #line 978 "..\..\Views\Uploads\Index.cshtml"
                           Write(Model.FileName);

            
            #line default
            #line hidden
WriteLiteral("</strong></td>\r\n                </tr>\r\n                <tr");

WriteLiteral(" id=\"rowDescriptionResume\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(@">
                    <td>Description</td>
                    <td><strong><span>Cancelling upload</span></strong></td>
                </tr>
            </table>
            <p>To resume this upload, you must select the same file and the file must be unchanged.</p>
            <center");

WriteLiteral(" id=\"resumeOptions\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" id=\"resume\"");

WriteLiteral(">Resume</button>\r\n                &nbsp;\r\n                &nbsp;\r\n               " +
" <button");

WriteLiteral(" id=\"cancel\"");

WriteLiteral(">Cancel</button>\r\n            </center>\r\n        </div>\r\n        <div");

WriteLiteral(" id=\"dialogMessage\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(">\r\n            <strong><p");

WriteLiteral(" id=\"pMessage\"");

WriteLiteral("></p></strong>\r\n            <p");

WriteLiteral(" id=\"pException\"");

WriteLiteral("></p>\r\n        </div>\r\n    </div>\r\n</form>\r\n<br />\r\n");

        }
    }
}
#pragma warning restore 1591
