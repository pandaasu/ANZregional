#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlatFileLoaderUtility.Views.Uploads
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using FlatFileLoaderUtility.Models;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Uploads/Index.cshtml")]
    public partial class Index : System.Web.Mvc.WebViewPage<FlatFileLoaderUtility.ViewModels.FileUploadViewModel>
    {
        public Index()
        {
        }
        public override void Execute()
        {
            
            #line 3 "..\..\Views\Uploads\Index.cshtml"
  
    ViewBag.Title = "File Upload";

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n");

DefineSection("JavascriptImport", () => {

WriteLiteral("\r\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\r\n\r\n        /**************************************************\r\n        /* Page" +
" Variables\r\n        /**************************************************/\r\n      " +
"  var ustatus = null;\r\n        var fileData = null;\r\n        var inProgressInter" +
"faceCode = \"");

            
            #line 15 "..\..\Views\Uploads\Index.cshtml"
                                  Write(Model.InterfaceCode);

            
            #line default
            #line hidden
WriteLiteral("\";\r\n        var inProgressInterfaceName = \"");

            
            #line 16 "..\..\Views\Uploads\Index.cshtml"
                                  Write(Model.InterfaceName);

            
            #line default
            #line hidden
WriteLiteral("\";\r\n        var inProgressFileName = \"");

            
            #line 17 "..\..\Views\Uploads\Index.cshtml"
                             Write(Model.FileName);

            
            #line default
            #line hidden
WriteLiteral("\";\r\n        var inProgressFileSize = ");

            
            #line 18 "..\..\Views\Uploads\Index.cshtml"
                            Write(Model.FileSize);

            
            #line default
            #line hidden
WriteLiteral(";\r\n        var inProgressLastSegment = ");

            
            #line 19 "..\..\Views\Uploads\Index.cshtml"
                               Write(Model.LastSegment);

            
            #line default
            #line hidden
WriteLiteral(";\r\n        var inProgressReceivedLength = ");

            
            #line 20 "..\..\Views\Uploads\Index.cshtml"
                                  Write(Model.ReceivedStringLength);

            
            #line default
            #line hidden
WriteLiteral(";\r\n        var isResuming = false;\r\n        var isModernBrowser = (window.File &&" +
" window.FileReader && window.Blob);\r\n        var doCancel = false;\r\n        var " +
"continueMonitoring = true;\r\n        var compressionMode = 1;\r\n        var lzma =" +
" new LZMA(\"/scripts/lzma_worker.min.js\");\r\n\r\n        /**************************" +
"************************\r\n        /* Document Ready\r\n        /******************" +
"********************************/\r\n        $(document).ready(function () {\r\n    " +
"        // Plugin instantiation\r\n            $(\"#ddlInterfaceGroup\").chosen({ se" +
"arch_contains: true });\r\n            $(\"#ddlInterface\").chosen({ search_contains" +
": true });\r\n\r\n            // Event Listeners\r\n            $(\"#ddlInterfaceGroup\"" +
").change(function () {\r\n                GetInterfaceOptions($(this).val(), \"*INB" +
"OUND\", $(\"#ddlInterface\"), true, false);\r\n            });\r\n\r\n            $(\"#ddl" +
"Interface\").change(function () {\r\n                $(\"#tdFileType\").html(\"\");\r\n\r\n" +
"                if ($(this).val() == \"\")\r\n                    return;\r\n\r\n       " +
"         $.ajax({\r\n                    type: \"post\",\r\n                    url: \"" +
"/Base/GetInterfaceDetails\",\r\n                    data: {\r\n                      " +
"  interfaceCode: $(this).val()\r\n                    },\r\n                    asyn" +
"c: true,\r\n                    success: function (response) {\r\n                  " +
"      if (response.Result != \"OK\") {\r\n                            $(\"#tdFileType" +
"\").html(response.Message);\r\n                        }\r\n                        e" +
"lse {\r\n                            $(\"#tdFileType\").html(\"Expected file type: <s" +
"trong>\" + response.Data.FileType + \"</strong>\" + ((response.Data.FileType == \"cs" +
"v\" || response.Data.FileType == \"tab\") ? \", and qualifier: <strong>\" + response." +
"Data.CsvQualifier + \"</strong>\" : \"\"));\r\n                        }\r\n            " +
"        },\r\n                    error: function (xhr, ajaxOptions, thrownError) " +
"{\r\n                        $(\"#tdFileType\").html(\"Expected file type for this in" +
"terface could not be determined\");\r\n                    }\r\n                });\r\n" +
"            });\r\n\r\n            $(\"#validationForm\").validationEngine(\"attach\", {" +
"\r\n                prettySelect : true,\r\n                useSuffix: \"_chzn\"\r\n    " +
"        });\r\n\r\n            $(\"#file\").change(function () {\r\n                $(\"#" +
"fakefile\").val($(\"#file\").val().replace(/C:\\\\fakepath\\\\/i, \'\'));\r\n              " +
"  if (isModernBrowser) {\r\n                    fileData = this.files[0];\r\n       " +
"         }\r\n            });\r\n\r\n            $(\"#fakefile\").click(function () {\r\n " +
"               $(\"#file\").click();\r\n                return false;\r\n            }" +
");\r\n\r\n            $(\"#fakefileButton\").click(function () {\r\n                $(\"#" +
"file\").click();\r\n                return false;\r\n            });\r\n\r\n            $" +
"(\"#upload\").click(function () {\r\n                // Validate inputs\r\n           " +
"     // This will ensure that both an interface and a file have been selected\r\n " +
"               if (!$(\"#validationForm\").validationEngine(\"validate\"))\r\n        " +
"            return false;\r\n\r\n                // Instantiate a Status object to h" +
"old the upload state\r\n                ustatus = new UStatus();\r\n                " +
"ustatus.InterfaceCode = $(\"#ddlInterface\").val();\r\n                ustatus.FileP" +
"ath = $(\"#file\").val().replace(/C:\\\\fakepath\\\\/i, \'\');\r\n                ustatus." +
"FileName = ustatus.FilePath.split(\"\\\\\").pop();\r\n                ustatus.SegmentB" +
"ytes = ");

            
            #line 101 "..\..\Views\Uploads\Index.cshtml"
                                  Write(Model.SegmentBytes);

            
            #line default
            #line hidden
WriteLiteral(";\r\n                ustatus.MinCompressionBytes = ");

            
            #line 102 "..\..\Views\Uploads\Index.cshtml"
                                         Write(Model.MinCompressionBytes);

            
            #line default
            #line hidden
WriteLiteral(";\r\n                ustatus.MaxCompressionBytes = ");

            
            #line 103 "..\..\Views\Uploads\Index.cshtml"
                                         Write(Model.MaxCompressionBytes);

            
            #line default
            #line hidden
WriteLiteral(";\r\n                ustatus.StartCompressionBytes = ");

            
            #line 104 "..\..\Views\Uploads\Index.cshtml"
                                           Write(Model.StartCompressionBytes);

            
            #line default
            #line hidden
WriteLiteral(";\r\n                ustatus.MaxCompressedSegmentsPerRequest = ");

            
            #line 105 "..\..\Views\Uploads\Index.cshtml"
                                                     Write(Model.MaxCompressedSegmentsPerRequest);

            
            #line default
            #line hidden
WriteLiteral(";\r\n                ustatus.CompressionStep = ");

            
            #line 106 "..\..\Views\Uploads\Index.cshtml"
                                     Write(Model.CompressionStep);

            
            #line default
            #line hidden
WriteLiteral(";\r\n                ustatus.SegmentBytesCurrent = ustatus.StartCompressionBytes;\r\n" +
"                ustatus.UseCompression = (ustatus.UseCompression && $(\"#compress" +
"Yes\").hasClass(\"option-selected\"));\r\n\r\n                // The filename cannot ex" +
"ceed 64 characters\r\n                if (ustatus.FileName.length > 64) {\r\n       " +
"             ustatus.Message = \"The filename cannot exceed 64 characters.\";\r\n   " +
"                 ustatus.IsError = true;\r\n                    ShowResult(true);\r" +
"\n                    return false;\r\n                }\r\n\r\n                // Init" +
"iate the upload.\r\n                // Browsers supporting HTML5 perform the file " +
"reading asynchronously\r\n                // So this is the last function that can" +
" be called from the upload click eventhandler\r\n                UploadInitiatePar" +
"t1();\r\n\r\n                return false;\r\n            });\r\n\r\n            $(\"#cance" +
"lUpload\").click(function () {\r\n                $(this).attr(\"disabled\", \"disable" +
"d\");\r\n                $(\"#uploadOptions\").hide();\r\n                doCancel = tr" +
"ue;\r\n                if (ustatus != null)\r\n                    ustatus.Compressi" +
"onTerminate = true;\r\n                return false;\r\n            });\r\n\r\n         " +
"   $(\"#cancel\").click(function () {\r\n                $(\"form :input\").attr(\"disa" +
"bled\", \"disabled\").trigger(\"liszt:updated\");\r\n                $(\"#resumeOptions\"" +
").hide();\r\n                $(\"#rowDescriptionResume\").show();\r\n                i" +
"f (ustatus == null)\r\n                    ustatus = new UStatus();\r\n             " +
"   UploadCancel(false);\r\n                return false;\r\n            });\r\n\r\n     " +
"       $(\"#resume\").click(function () {\r\n                $(\"#ddlInterface\").val(" +
"inProgressInterfaceCode);\r\n                $(\"#ddlInterface\").attr(\"disabled\", \"" +
"disabled\").trigger(\"liszt:updated\");\r\n                $(\"#ddlInterfaceGroup\").at" +
"tr(\"disabled\", \"disabled\").trigger(\"liszt:updated\");\r\n                $(\".ui-dia" +
"log-content\").dialog(\"destroy\");\r\n                $(\"#file\").click();\r\n         " +
"       isResuming = true;\r\n                return false;\r\n            });\r\n\r\n   " +
"         $(\"#useCompression li\").click(function () {\r\n                $(\"#useCom" +
"pression li\").removeClass(\"option-selected\");\r\n                $(this).addClass(" +
"\"option-selected\");\r\n            });\r\n\r\n            // Document ready actions\r\n " +
"           if (inProgressInterfaceCode != \"\") {\r\n                $(\"#dialogResum" +
"e\").dialog({\r\n                    modal: true\r\n                });\r\n            " +
"}\r\n            if (Modernizr.webworkers && $.QueryString[\"advanced\"]) {\r\n       " +
"         $(\"#rowCompression\").show();\r\n            } \r\n        });\r\n\r\n        /*" +
"*************************************************\r\n        /* Page Functions\r\n  " +
"      /**************************************************/\r\n        \r\n        //" +
" Called to cancel an upload\r\n        function UploadCancel(silentCancel) {\r\n    " +
"        var doSilentCancel = silentCancel;\r\n            $.ajax({\r\n              " +
"  type: \"post\",\r\n                url: \"/Uploads/Cancel\",\r\n                conten" +
"tType: \"application/json\",\r\n                async: true,\r\n                succes" +
"s: function (response) {\r\n                    if (doSilentCancel)\r\n             " +
"           return;\r\n                    if (response.Result != \"OK\") {\r\n        " +
"                ustatus.Message = \"Error while cancelling the upload.\";\r\n       " +
"                 ustatus.Exception = response.Message;\r\n                        " +
"ustatus.UploadId = response.UploadId;\r\n                        ustatus.LicsId = " +
"response.LicsId;\r\n                        ustatus.IsError = true;\r\n             " +
"           ShowResult(true);\r\n                    }\r\n                    else {\r" +
"\n                        ustatus.Message = \"Upload successfully cancelled.\";\r\n  " +
"                      ustatus.Exception = \"\";\r\n                        ShowResul" +
"t(true);\r\n                    }\r\n                },\r\n                error: func" +
"tion (xhr, ajaxOptions, thrownError) {\r\n                    if (doSilentCancel)\r" +
"\n                        return;\r\n                    ustatus.Message = \"Error c" +
"ommunicating with server.\";\r\n                    ustatus.Exception = (isTest) ? " +
"thrownError : \"\";\r\n                    ustatus.IsError = true;\r\n                " +
"    ShowResult(true);\r\n                }\r\n            });\r\n\r\n            doCance" +
"l = false;\r\n        }\r\n\r\n        // Called to initiate an upload. Split into 2 p" +
"arts to support async file read on modern browsers (done here to support async c" +
"ompression).\r\n        function UploadInitiatePart1() {\r\n            // First, di" +
"sable the form so that the user can\'t click the button again\r\n            $(\"for" +
"m :input:not(#cancelUpload)\").attr(\"disabled\", \"disabled\").trigger(\"liszt:update" +
"d\");\r\n\r\n            if (isResuming && ustatus.FileName != inProgressFileName) {\r" +
"\n                ustatus.Message = \"Filename does not match. Cannot resume witho" +
"ut the same file.\";\r\n                ustatus.Exception = \"\";\r\n                us" +
"tatus.IsError = true;\r\n                ShowResult(true);\r\n                return" +
";\r\n            }\r\n            if (isResuming && fileData != null && fileData.siz" +
"e != inProgressFileSize) {\r\n                ustatus.Message = \"File size does no" +
"t match original upload. Cannot resume without the same file.\";\r\n               " +
" ustatus.Exception = \"\";\r\n                ustatus.IsError = true;\r\n             " +
"   ShowResult(true);\r\n                return;\r\n            }\r\n\r\n            // T" +
"hen, show the progress indicator\r\n            $(\"#spanInterface\").text($(\"#ddlIn" +
"terface option:selected\").text());\r\n            $(\"#spanFilename\").text(ustatus." +
"FileName);\r\n            if (fileData != null) {\r\n                ustatus.FileSiz" +
"e = fileData.size;\r\n                $(\"#spanFilesize\").text(addCommas(parseInt(M" +
"ath.ceil(parseFloat(ustatus.FileSize)/1024))) + \" kB\");\r\n            }\r\n        " +
"    $(\"#uploadOptions\").show();\r\n            $(\"#divResult\").hide();\r\n          " +
"  $(\"#step1tick\").hide();\r\n            $(\"#step2tick\").hide();\r\n            $(\"#" +
"step3tick\").hide();\r\n            $(\"#step4tick\").hide();\r\n            $(\"#step5t" +
"ick\").hide();\r\n            $(\"#step4time\").hide();\r\n            $(\"#step5time\")." +
"hide();\r\n            $(\".failure\").hide();\r\n            $(\".success\").hide();\r\n " +
"           $(\".failureProgress\").removeClass(\"failureProgress\");\r\n            $(" +
"\".successProgress\").removeClass(\"successProgress\");\r\n            SetProgressDesc" +
"ription(\"Step 1 - Initialising upload\");\r\n\r\n            $(\"#dialog\").dialog({\r\n " +
"               modal: true,\r\n                height: \"auto\",\r\n                cl" +
"ose: function (event, ui) {\r\n                    continueMonitoring = false;\r\n  " +
"              },\r\n                buttons: {}\r\n            });\r\n            $(\"#" +
"progressbar\").progressbar({\r\n                value: 0\r\n            });\r\n        " +
"    \r\n            continueMonitoring = true;\r\n\r\n            if (isModernBrowser)" +
" {\r\n                var fr = new FileReader();\r\n                fr.onload = func" +
"tion (e) {\r\n                    ustatus.Remainder = e.target.result;\r\n          " +
"          ustatus.TotalLength = ustatus.Remainder.length;\r\n\r\n                   " +
" if (isResuming && inProgressReceivedLength > 0) {\r\n                        usta" +
"tus.Remainder = ustatus.Remainder.substr(inProgressReceivedLength);\r\n           " +
"         }\r\n                    if (ustatus.Remainder.length <= ustatus.MinCompr" +
"essionBytes) {\r\n                        ustatus.UseCompression = false;\r\n       " +
"             }\r\n                    if (ustatus.UseCompression) {\r\n             " +
"           ProcessCompression();\r\n                    }\r\n                    Upl" +
"oadInitiatePart2();\r\n                };\r\n                fr.readAsText(fileData," +
" \"UTF-8\");\r\n            }\r\n            else {\r\n                UploadInitiatePar" +
"t2();\r\n            }\r\n        }\r\n\r\n        // Called to initiate an upload. Spli" +
"t into 2 parts to support async file read on modern browsers (done here to suppo" +
"rt async compression).\r\n        function UploadInitiatePart2() {\r\n            //" +
" Now initiate the upload\r\n            // This will also confirm that the correct" +
" filetype has been selected for the given interface\r\n            if (!isResuming" +
") {\r\n                $.ajax({\r\n                    type: \"post\",\r\n              " +
"      url: \"/Uploads/Start\",\r\n                    contentType: \"application/json" +
"\",\r\n                    data: JSON.stringify({\r\n                        interfac" +
"eCode: ustatus.InterfaceCode,\r\n                        filename: ustatus.FileNam" +
"e\r\n                    }),\r\n                    async: true,\r\n                  " +
"  success: function (response) {\r\n                        if (response.Result !=" +
" \"OK\") {\r\n                            ustatus.IsError = true;\r\n                 " +
"           ustatus.Message = \"Error starting the upload.\";\r\n                    " +
"        ustatus.Exception = response.Message;\r\n                            ShowR" +
"esult(false);\r\n                        }\r\n                        else {\r\n      " +
"                      UploadInitiateCallback();\r\n                        }\r\n    " +
"                },\r\n                    error: function (xhr, ajaxOptions, throw" +
"nError) {\r\n                        ustatus.IsError = true;\r\n                    " +
"    ustatus.Message = \"Error communicating with server.\";\r\n                     " +
"   ustatus.Exception = (isTest) ? thrownError : \"\";\r\n                        Sho" +
"wResult(false);\r\n                    }\r\n                });\r\n            }\r\n    " +
"        else {\r\n                UploadInitiateCallback();\r\n            }\r\n      " +
"  }\r\n\r\n        function SetProgressDescription(description) {\r\n            $(\"#p" +
"rogressText\").text(description);\r\n        }\r\n\r\n        // Callback function for " +
"initiating an upload\r\n        function UploadInitiateCallback() {\r\n            u" +
"status.CurrentStep++;\r\n            $(\"#step1tick\").show();\r\n            SetProgr" +
"essDescription(\"Step 2 - Uploading data\");\r\n\r\n            // Next, start uploadi" +
"ng the segments.\r\n            // This is handled differently depending on whethe" +
"r or not the browser supports the necessary HTML5 elements.\r\n            // If n" +
"ot, then it has to use ActiveX (which means Internet Explorer)\r\n            if (" +
"isModernBrowser) {\r\n                if (ustatus.TotalLength == 0) {\r\n           " +
"         SetNoMoreSegments();\r\n                }\r\n                else {\r\n      " +
"              ProcessSegment();\r\n                }\r\n            }\r\n            e" +
"lse if (ActiveXObject) {\r\n                \r\n                var fso = new Active" +
"XObject(\"Scripting.FileSystemObject\");\r\n                ustatus.TotalLength = fs" +
"o.getFile(ustatus.FilePath).size;\r\n                ustatus.FileSize = ustatus.To" +
"talLength;\r\n                ustatus.File = fso.OpenTextFile(ustatus.FilePath, 1," +
" false, -1); // -1 = Unicode\r\n                ustatus.NeedsEncodingFix = true;\r\n" +
"\r\n                if (isResuming && ustatus.FileSize != inProgressFileSize && in" +
"ProgressFileSize > 0) {\r\n                    ustatus.File.Close();\r\n            " +
"        ustatus.Message = \"File size does not match original upload. Cannot resu" +
"me without the same file.\";\r\n                    ustatus.Exception = \"\";\r\n      " +
"              ustatus.IsError = true;\r\n                    ShowResult(true);\r\n  " +
"                  return;\r\n                }\r\n\r\n                // Now that the " +
"file is accessed, the size is available\r\n                $(\"#spanFilesize\").text" +
"(addCommas(parseInt(Math.ceil(parseFloat(ustatus.TotalLength)/1024))) + \" kB\");\r" +
"\n                \r\n                if (ustatus.TotalLength == 0) {\r\n            " +
"        ustatus.File.Close();\r\n                    SetNoMoreSegments();\r\n       " +
"         }\r\n                else {\r\n                    ProcessSegment();\r\n     " +
"           }\r\n            }\r\n        }\r\n\r\n        // Called to process a file se" +
"gment. Called iteratively until file is fully processed\r\n        function Proces" +
"sSegment()\r\n        {\r\n            if (doCancel) {\r\n                SetProgressD" +
"escription(\"Cancelling upload\");\r\n                UploadCancel(false);\r\n        " +
"    }\r\n            else if (ustatus.UseCompression || ustatus.Segments.length > " +
"0) {\r\n                if (ustatus.IsError) {\r\n                    UploadCancel(t" +
"rue);\r\n                    ShowResult(false);\r\n                    return;\r\n    " +
"            }\r\n                if (ustatus.CompressionFinished && ustatus.Segmen" +
"ts.length == 0) {\r\n                    UploadMonitor();\r\n                }\r\n    " +
"            else if (ustatus.Segments.length > 0) {\r\n                    ustatus" +
".TimeWaiting = 0;\r\n                    ustatus.SegmentCount++;\r\n                " +
"    $(\"#progressbar\").progressbar(\"value\", ustatus.Segments[Math.min(ustatus.Seg" +
"ments.length, ustatus.MaxCompressedSegmentsPerRequest) - 1].ProcessedLength * 10" +
"0 / ustatus.TotalLength);\r\n                    UploadSegment(ustatus.Segments, u" +
"status.CompressionFinished);\r\n                }\r\n                else {\r\n       " +
"             // The first time spent waiting after initialisation or resuming do" +
"esn\'t count.\r\n                    if (ustatus.SegmentCount > 0)\r\n               " +
"         ustatus.TimeWaiting += 125;\r\n                    setTimeout(\"ProcessSeg" +
"ment();\", 125);\r\n                }\r\n            }\r\n            else if (isModern" +
"Browser) {\r\n                if (ustatus.Remainder.length == 0) {\r\n              " +
"      // The upload phase is complete, now monitor the progress\r\n               " +
"     UploadMonitor();\r\n                }\r\n                else {\r\n              " +
"      while (ustatus.Remainder.length > 0) {\r\n                        if (ustatu" +
"s.Remainder.length > ustatus.SegmentBytes - ustatus.MaxRowSize - 10) {\r\n        " +
"                    var index = ustatus.SegmentBytes - ustatus.MaxRowSize - 10;\r" +
"\n                            while (index < ustatus.Remainder.length && ustatus." +
"Remainder[index] != \"\\n\") {\r\n                                index++;\r\n         " +
"                       if (index > ustatus.SegmentBytes) {\r\n                    " +
"                // The line exceeds the maximum line length. Terminate upload pr" +
"ocess.\r\n                                    ustatus.IsError = true;\r\n           " +
"                         ustatus.Message = \"End of line not found within maximum" +
" line length.\";\r\n                                    ustatus.Exception = \"Please" +
" check line length and end of line encoding in the file.\";\r\n                    " +
"                UploadCancel(true);\r\n                                    ShowRes" +
"ult(false);\r\n                                    return;\r\n                      " +
"          }\r\n                            }\r\n                            index++;" +
"\r\n                            segment = ustatus.Remainder.substring(0, index);\r\n" +
"                            ustatus.Remainder = ustatus.Remainder.substr(index);" +
"\r\n                        }\r\n                        else {\r\n                   " +
"         segment = ustatus.Remainder;\r\n                            ustatus.Remai" +
"nder = \"\";\r\n                        }\r\n                        \r\n               " +
"         ustatus.ProcessedLength = ustatus.TotalLength - ustatus.Remainder.lengt" +
"h;\r\n                        $(\"#progressbar\").progressbar(\"value\", ustatus.Proce" +
"ssedLength * 100 / ustatus.TotalLength);\r\n\r\n                        UploadSegmen" +
"t(segment, ustatus.Remainder.length <= 0);\r\n                        return;\r\n   " +
"                 }\r\n                    // this is for the case where a file is " +
"resumed after the last segment is actually uploaded\r\n                    UploadM" +
"onitor();\r\n                }\r\n            }\r\n            else {\r\n               " +
" if (ustatus.File.AtEndOfStream) {\r\n                    ustatus.File.Close();\r\n\r" +
"\n                    // The upload phase is complete, now monitor the progress\r\n" +
"                    UploadMonitor();\r\n                }\r\n                else {\r" +
"\n                    while (!ustatus.File.AtEndOfStream) {\r\n                    " +
"    var aryData = new Array();\r\n                        var x = 0;\r\n            " +
"            if (ustatus.DanglingChar != \"\") {\r\n                            aryDa" +
"ta[x++] = ustatus.DanglingChar;\r\n                            ustatus.DanglingCha" +
"r = \"\";\r\n                        }\r\n                        aryData[x++] = ustat" +
"us.File.Read(ustatus.SegmentBytes - ustatus.MaxRowSize - 10);\r\n                 " +
"       while (!ustatus.File.AtEndOfStream) {\r\n                            var c " +
"= ustatus.File.Read(1);\r\n                            var code = c.charCodeAt(0);" +
"\r\n                            // It\'s read 16 bits, so have to mask all but the " +
"lower 8 bits to read read ASCII character (10 == newline)\r\n                     " +
"       // There\'s also a possibility that the newline will be in the upper half," +
" so have to shift 8 bits.\r\n                            // But in that case, the " +
"lower byte would need to be preserved for the next segment\r\n                    " +
"        //alert(\"upper: \" + String.fromCharCode(code & 0xFF) + \"(\" + (code & 0xF" +
"F) + \"), lower: \" + String.fromCharCode(code >> 8) + \"(\" + (code >> 8) + \")\")\r\n " +
"                           if ((code & 0xFF) == 10) {\r\n                         " +
"       aryData[x++] = String.fromCharCode((13 << 8) + 10);\r\n                    " +
"            ustatus.DanglingChar = String.fromCharCode((13 << 8) + (code >> 8));" +
"\r\n                                break;\r\n                            }\r\n       " +
"                     if ((code >> 8) == 10) {\r\n                                a" +
"ryData[x++] = c;\r\n                                break;\r\n                      " +
"      }\r\n                            aryData[x++] = c;\r\n\r\n                      " +
"      if (x > (ustatus.MaxRowSize / 2) + 5) {\r\n                                /" +
"/ The line exceeds the maximum line length. Terminate upload process.\r\n         " +
"                       ustatus.File.Close();\r\n                                us" +
"tatus.IsError = true;\r\n                                ustatus.Message = \"End of" +
" line not found within maximum line length.\";\r\n                                u" +
"status.Exception = \"Please check line length and end of line encoding in the fil" +
"e.\";\r\n                                UploadCancel(true);\r\n                     " +
"           ShowResult(false);\r\n                                return;\r\n        " +
"                    }\r\n                        }\r\n                        ustatu" +
"s.SegmentCount++;\r\n\r\n                        var segment = aryData.join(\'\');\r\n  " +
"                      ustatus.ProcessedLength += segment.length;\r\n\r\n            " +
"            // ProcessedLength * 200 percent because the data is read 2 bytes at" +
" a time\r\n                        $(\"#progressbar\").progressbar(\"value\", ustatus." +
"ProcessedLength * 200 / ustatus.TotalLength);\r\n\r\n                        if (!is" +
"Resuming || ustatus.SegmentCount > inProgressLastSegment) {\r\n                   " +
"         UploadSegment(segment, ustatus.File.AtEndOfStream);\r\n                  " +
"          return;\r\n                        }\r\n                    }\r\n\r\n         " +
"           // this is for the case where a file is resumed after the last segmen" +
"t is actually uploaded\r\n                    ustatus.File.Close();\r\n\r\n           " +
"         // The upload phase is complete, now monitor the progress\r\n            " +
"        UploadMonitor();\r\n                }\r\n            }\r\n        }\r\n\r\n       " +
" // Compresses all the file, segment by segment\r\n        function ProcessCompres" +
"sion() {\r\n\r\n            if (ustatus.CompressionTerminate)\r\n                retur" +
"n;\r\n\r\n            while (ustatus.Remainder.length > 0) {\r\n                var do" +
"Compress = true;\r\n                if (ustatus.Segments.length >= 2 && ustatus.Se" +
"gmentBytesCurrent < ustatus.MaxCompressionBytes) {\r\n                    ustatus." +
"SegmentBytesCurrent += ustatus.CompressionStep;\r\n                }\r\n            " +
"    else if (ustatus.TimeWaiting > 0 && ustatus.SegmentBytesCurrent > ustatus.St" +
"artCompressionBytes) {\r\n                    ustatus.SegmentBytesCurrent -= ustat" +
"us.CompressionStep;\r\n                }\r\n                else if (ustatus.TimeWai" +
"ting > 0 && !$(\"#rowCompression\").is(\":visible\")) {\r\n                    // The " +
"uploader is waiting for data even on the minimum compression step, skip compress" +
"ion on a segment\r\n                    // Test if it is going to be better to tur" +
"n off compression\r\n                    if (ustatus.TotalCompressionSegs > 0 && u" +
"status.TotalUploadSegs > 0) {\r\n                        var averageCompressionTim" +
"e = ustatus.TotalCompressionTime / ustatus.TotalCompressionSegs;\r\n              " +
"          var averageUploadTime = ustatus.TotalUploadTime / ustatus.TotalUploadS" +
"egs;\r\n                        if (averageCompressionTime > averageUploadTime) {\r" +
"\n                            ustatus.UseCompression = false;\r\n                  " +
"          return;\r\n                        }\r\n                    }\r\n           " +
"         doCompress = false;\r\n                    ustatus.TimeWaiting = 0;\r\n    " +
"            }\r\n                var wantedBytes = (doCompress) ? ustatus.SegmentB" +
"ytesCurrent : ustatus.SegmentBytes;\r\n                if (ustatus.Remainder.lengt" +
"h > wantedBytes - ustatus.MaxRowSize - 10) {\r\n                    var index = wa" +
"ntedBytes - ustatus.MaxRowSize - 10;\r\n                    while (index < ustatus" +
".Remainder.length && ustatus.Remainder[index] != \"\\n\") {\r\n                      " +
"  index++;\r\n                        if (index > wantedBytes) {\r\n                " +
"            // The line exceeds the maximum line length. Terminate upload proces" +
"s.\r\n                            ustatus.IsError = true;\r\n                       " +
"     ustatus.Message = \"End of line not found within maximum line length.\";\r\n   " +
"                         ustatus.Exception = \"Please check line length and end o" +
"f line encoding in the file.\";\r\n                            return;\r\n           " +
"             }\r\n                    }\r\n                    index++;\r\n           " +
"         segment = ustatus.Remainder.substring(0, index);\r\n                    u" +
"status.Remainder = ustatus.Remainder.substr(index);\r\n                }\r\n        " +
"        else {\r\n                    segment = ustatus.Remainder;\r\n              " +
"      ustatus.Remainder = \"\";\r\n                }\r\n\r\n                if (!doCompr" +
"ess) {\r\n                    // Compression isn\'t keeping up with the connection\'" +
"s demand for data\r\n                    // Send through an uncompressed segment\r\n" +
"                    var seg = new Segment();\r\n                    seg.StringData" +
" = segment;\r\n                    seg.ProcessedLength = ustatus.TotalLength - ust" +
"atus.Remainder.length;\r\n                    seg.IsFinalSegment = ustatus.Remaind" +
"er.length <= 0;\r\n                    ustatus.Segments.push(seg);\r\n              " +
"      ProcessCompression();\r\n                }\r\n                else {\r\n        " +
"            var startTime = new Date();\r\n                    lzma.compress(segme" +
"nt, compressionMode, function on_compress_complete(result) {\r\n                  " +
"      if (result === false) {\r\n                            // Something went wro" +
"ng with the compression\r\n                            // Add the segment back to " +
"the remainder to process, and switch to uncompressed mode\r\n                     " +
"       ustatus.Remainder = segment + ustatus.Remainder;\r\n                       " +
"     ustatus.UseCompression = false;\r\n                            return;\r\n     " +
"                   }\r\n                        var seg = new Segment();\r\n        " +
"                seg.ByteArray = result;\r\n                        seg.ProcessedLe" +
"ngth = ustatus.TotalLength - ustatus.Remainder.length;\r\n                        " +
"seg.IsFinalSegment = ustatus.Remainder.length <= 0;\r\n                        ust" +
"atus.Segments.push(seg);\r\n                        ustatus.TotalCompressionTime +" +
"= (new Date() - startTime);\r\n                        ustatus.TotalCompressionSeg" +
"s += (ustatus.SegmentBytesCurrent / ustatus.SegmentBytes);\r\n                    " +
"    ProcessCompression();\r\n                    });\r\n                }\r\n         " +
"       return;\r\n            }\r\n\r\n            ustatus.CompressionFinished = true;" +
"\r\n        }\r\n\r\n        // Called to upload segment to server\r\n        function U" +
"ploadSegment(segmentData, isFinalSegment) {\r\n\r\n            var postData = null;\r" +
"\n            var url = \"/Uploads/Segment\";\r\n            var usingCompression = u" +
"status.UseCompression || (ustatus.Segments.length > 0);\r\n\r\n            if (using" +
"Compression && ustatus.Segments.length > 0 && ustatus.Segments[0].StringData != " +
"\"\") {\r\n                // The first segment in the queue is not compressed (happ" +
"ens when compression isn\'t keeping up with connection throughput)\r\n             " +
"   usingCompression = false;\r\n                segmentData = ustatus.Segments[0]." +
"StringData;\r\n                isFinalSegment = ustatus.Segments[0].IsFinalSegment" +
";\r\n                ustatus.Segments.splice(0, 1);\r\n            }\r\n\r\n            " +
"if (usingCompression) {\r\n                postData = new FormData();\r\n           " +
"     var isFinal = false;\r\n                var includedInUpload = 0;\r\n          " +
"      for (var i = 0; i < Math.min(segmentData.length, ustatus.MaxCompressedSegm" +
"entsPerRequest); i++) {\r\n                    var seg = segmentData[i];\r\n        " +
"            if (seg.StringData != \"\")\r\n                        break;\r\n         " +
"           includedInUpload = i + 1;\r\n                    var arry = new Int8Arr" +
"ay(seg.ByteArray);\r\n                    var oBlob = null;\r\n                    t" +
"ry {\r\n                        oBlob = new Blob([arry.buffer], { type: \"applicati" +
"on/octet-stream\" });\r\n                    } catch (e) {\r\n                       " +
" // The BlobBuilder API has been deprecated in favour of Blob, but older\r\n      " +
"                  // browsers don\'t know about the Blob constructor\r\n           " +
"             var bb = new (window.WebKitBlobBuilder || window.MozBlobBuilder);\r\n" +
"                        bb.append(arry.buffer);\r\n                        oBlob =" +
" bb.getBlob(\"application/octet-stream\");\r\n                    }\r\n               " +
"     isFinal = seg.IsFinalSegment;\r\n                    postData.append(\"data\" +" +
" i, oBlob);\r\n                }\r\n                // Clear the processed segments " +
"from the queue\r\n                ustatus.Segments.splice(0, includedInUpload);\r\n " +
"               url = \"/Uploads/SegmentCompressed?interfaceCode=\" + ustatus.Inter" +
"faceCode + \"&isFinalSegment=\" + isFinal + \"&fileSize=\" + ustatus.FileSize + \"&fi" +
"leName=\" + encodeURIComponent(ustatus.FileName);\r\n            }\r\n            els" +
"e {\r\n                postData = JSON.stringify({\r\n                    interfaceC" +
"ode: ustatus.InterfaceCode,\r\n                    filename: ustatus.FileName,\r\n  " +
"                  segmentData: segmentData,\r\n                    isFinalSegment:" +
" isFinalSegment,\r\n                    fileSize: ustatus.FileSize,\r\n             " +
"       needsEncodingFix: ustatus.NeedsEncodingFix\r\n                });\r\n        " +
"    }\r\n            \r\n            var startTime = new Date();\r\n            $.ajax" +
"({\r\n                type: \"post\",\r\n                url: url,\r\n                co" +
"ntentType: usingCompression ? false : \"application/json\",\r\n                proce" +
"ssData: !usingCompression,\r\n                data: postData,\r\n                asy" +
"nc: true,\r\n                success: function (response) {\r\n                    i" +
"f (response.Result != \"OK\") {\r\n                        ustatus.IsError = true;\r\n" +
"                        ustatus.Message = \"Error while uploading file segment.\"\r" +
"\n                        ustatus.Exception = response.Message;\r\n                " +
"        ustatus.UploadId = response.UploadId;\r\n                        ustatus.L" +
"icsId = response.LicsId;\r\n                        ShowResult(false);\r\n          " +
"          }\r\n                    else {\r\n                        if (!usingCompr" +
"ession) {\r\n                            ustatus.TotalUploadTime += (new Date() - " +
"startTime);\r\n                            ustatus.TotalUploadSegs += 1;\r\n        " +
"                }\r\n                        ProcessSegment();\r\n                  " +
"  }\r\n                },\r\n                error: function (xhr, ajaxOptions, thro" +
"wnError) {\r\n                    ustatus.IsError = true;\r\n                    ust" +
"atus.Message = \"Error communicating with server.\";\r\n                    ustatus." +
"Exception = (isTest) ? thrownError : \"\";\r\n                    ShowResult(false);" +
"\r\n                }\r\n            });\r\n        }\r\n\r\n        // Called to indicate" +
" that there will be no more segments uploaded\r\n        // Used only when the upl" +
"oaded file has a size of 0 bytes\r\n        function SetNoMoreSegments() {\r\n      " +
"      $.ajax({\r\n                type: \"post\",\r\n                url: \"/Uploads/Se" +
"tNoMoreSegments\",\r\n                contentType: \"application/json\",\r\n           " +
"     data: JSON.stringify({\r\n                    interfaceCode: ustatus.Interfac" +
"eCode,\r\n                    filename: ustatus.FileName\r\n                }),\r\n   " +
"             async: true,\r\n                success: function (response) {\r\n     " +
"               if (response.Result != \"OK\") {\r\n                        ustatus.I" +
"sError = true;\r\n                        ustatus.Message = \"Error while setting f" +
"ile upload complete.\"\r\n                        ustatus.Exception = response.Mess" +
"age;\r\n                        ustatus.UploadId = response.UploadId;\r\n           " +
"             ustatus.LicsId = response.LicsId;\r\n                        ShowResu" +
"lt(false);\r\n                    }\r\n                    else {\r\n                 " +
"       UploadMonitor();\r\n                    }\r\n                },\r\n            " +
"    error: function (xhr, ajaxOptions, thrownError) {\r\n                    ustat" +
"us.IsError = true;\r\n                    ustatus.Message = \"Error communicating w" +
"ith server.\";\r\n                    ustatus.Exception = (isTest) ? thrownError : " +
"\"\";\r\n                    ShowResult(false);\r\n                }\r\n            });\r" +
"\n        }\r\n\r\n        // Called to show the result of an operation\r\n        func" +
"tion ShowResult(useNewDialog) {\r\n            // Re-enable the form underneath th" +
"e dialog\r\n            if (!ustatus.IsError) {\r\n                $(\"#ddlInterface\"" +
").val(\"\").change();\r\n                $(\"#fakefile\").val(\"\");\r\n                re" +
"setFormElement($(\"#file\"));\r\n            }\r\n            $(\"form :input\").removeA" +
"ttr(\"disabled\").trigger(\"liszt:updated\");\r\n            \r\n            if (useNewD" +
"ialog) {\r\n                // Remove any existing progress bars or dialog windows" +
"\r\n                $(\".ui-progressbar\").progressbar(\"destroy\");\r\n                " +
"$(\".ui-dialog-content\").dialog(\"destroy\");\r\n\r\n                // Set the message" +
" an exception text\r\n                $(\"#pMessage\").text(ustatus.Message);\r\n     " +
"           if (ustatus.Exception != \"\") {\r\n                    $(\"#pException\")." +
"text(ustatus.Exception);\r\n                    $(\"#pException\").show();\r\n        " +
"        }\r\n                else {\r\n                    $(\"#pException\").hide();\r" +
"\n                }\r\n\r\n                // Show the dialog\r\n                $(\"#di" +
"alogMessage\").dialog({\r\n                    modal: true,\r\n                    ti" +
"tle: (ustatus.IsError) ? \"Error\" : \"Message\",\r\n                    buttons: {\r\n " +
"                       Ok: function() {\r\n                            $(this).dia" +
"log(\"close\");\r\n                        }\r\n                    }\r\n               " +
" });\r\n            }\r\n            else {\r\n                $(\"#divResult\").show();" +
"\r\n                $(\"#uploadOptions\").hide();\r\n\r\n                $(\"#result\").te" +
"xt(ustatus.Message);\r\n                if (ustatus.Exception != \"\") {\r\n          " +
"          $(\"#pException2\").text(ustatus.Exception);\r\n                    $(\"#pE" +
"xception2\").show();\r\n                }\r\n                else {\r\n                " +
"    $(\"#pException2\").hide();\r\n                }\r\n\r\n                // Show the " +
"upload id if available and if in test mode\r\n                if (isTest && ustatu" +
"s.UploadId > 0) {\r\n                    $(\"#rowUploadId\").show();\r\n              " +
"      $(\"#uploadId\").text(ustatus.UploadId);\r\n                }\r\n               " +
" else {\r\n                    $(\"#rowUploadId\").hide();\r\n                }\r\n\r\n   " +
"             // Show the LICS id if it is available\r\n                if (ustatus" +
".LicsId > 0) {\r\n                    $(\"#rowLicsId\").show();\r\n                   " +
" $(\"#licsId\").text(ustatus.LicsId);\r\n                    $(\"#rowInterfaceErrors\"" +
").show();\r\n                    $(\"#interfaceErrorCount\").text(ustatus.InterfaceE" +
"rrorCount);\r\n                    $(\"#rowRowErrors\").show();\r\n                   " +
" $(\"#rowErrorCount\").text(ustatus.RowErrorCount);\r\n                    $(\"#rowDe" +
"tails\").show();\r\n                    $(\"#detailsLink\").attr(\"href\", \"/Monitor/Vi" +
"ew/\" + ustatus.LicsId);\r\n                }\r\n                else {\r\n            " +
"        $(\"#rowLicsId\").hide();\r\n                    $(\"#rowInterfaceErrors\").hi" +
"de();\r\n                    $(\"#rowRowErrors\").hide();\r\n                    $(\"#r" +
"owDetails\").hide();\r\n                }\r\n\r\n                $(\"#progressbar\").prog" +
"ressbar(\"value\", 100);\r\n                if (ustatus.IsError) {\r\n                " +
"    $(\"#progressbar > div\").addClass(\"failureProgress\");\r\n                    $(" +
"\".failure\").show();\r\n                }\r\n                else {\r\n                " +
"    $(\"#progressbar > div\").addClass(\"successProgress\");\r\n                    $(" +
"\".success\").show();\r\n                }\r\n\r\n                $(\"#dialog\").dialog({\r" +
"\n                    buttons: {\r\n                        Ok: function() {\r\n     " +
"                       $(this).dialog(\"close\");\r\n                        }\r\n    " +
"                }\r\n                });\r\n                $(\"#dialog\").dialog(\"opt" +
"ion\", \"position\", \"center\");\r\n            }\r\n\r\n            ustatus.CompressionTe" +
"rminate = true;\r\n        }\r\n\r\n        // Called to monitor the status of an ongo" +
"ing upload after all segments have been sent to the server\r\n        function Upl" +
"oadMonitor() {\r\n            \r\n            // Poll the status and update the disp" +
"lay until it\'s finished\r\n            \r\n            if (ustatus.IsError || !conti" +
"nueMonitoring)\r\n                return;\r\n            \r\n            $(\"#uploadOpt" +
"ions\").hide();\r\n\r\n            $.ajax({\r\n                type: \"post\",\r\n         " +
"       url: \"/Uploads/GetStatus\",\r\n                contentType: \"application/jso" +
"n\",\r\n                async: true,\r\n                success: function (response) " +
"{\r\n                    if (response.Result != \"OK\") {\r\n                        u" +
"status.IsError = true;\r\n                        ustatus.Message = \"Error while m" +
"onitoring upload ustatus.\"\r\n                        ustatus.Exception = response" +
".Message;\r\n                        ustatus.UploadId = response.UploadId;\r\n      " +
"                  ustatus.LicsId = response.LicsId;\r\n                        Sho" +
"wResult(false);\r\n                    }\r\n                    else {\r\n\r\n          " +
"              ustatus.CurrentStep = response.CurrentStep;\r\n                     " +
"   if (response.Total > 0 && response.Current > 0)\r\n                            " +
"$(\"#progressbar\").progressbar(\"value\", response.Current * 100 / response.Total);" +
"\r\n\r\n                        // It can be a long time on \"0\" progress...\r\n       " +
"                 // To let the user know that stuff is still happening, if it\'s " +
"0 just increment the progressbar\r\n                        if (response.Current =" +
"= 0 && ustatus.CurrentStep > 3) {\r\n                            var currentValue " +
"= $(\"#progressbar\").progressbar(\"value\");\r\n                            currentVa" +
"lue = (currentValue == 100 || isNaN(currentValue)) ? 0 : currentValue + 5;\r\n    " +
"                        $(\"#progressbar\").progressbar(\"value\", currentValue);\r\n " +
"                       }\r\n\r\n                        switch(ustatus.CurrentStep) " +
"{\r\n                            case 3:\r\n                                $(\"#step" +
"2tick\").show();\r\n                                SetProgressDescription(\"Step 3 " +
"- Completing data upload\");\r\n                                break;\r\n           " +
"                 case 4:\r\n                                $(\"#step2tick\").show()" +
";\r\n                                $(\"#step3tick\").show();\r\n                    " +
"            $(\"#step4time\").show();\r\n                                $(\"#step4ti" +
"me\").text(response.EstimatedTime);\r\n                                // From here" +
", the user is free to upload another file, so re-enable the form\r\n              " +
"                  $(\"form :input\").removeAttr(\"disabled\").trigger(\"liszt:updated" +
"\");\r\n                                SetProgressDescription(\"Step 4 - Uploading " +
"to ICS\");\r\n                                break;\r\n                            c" +
"ase 5:\r\n                                $(\"#step2tick\").show();\r\n               " +
"                 $(\"#step3tick\").show();\r\n                                $(\"#st" +
"ep4tick\").show();\r\n                                $(\"#step4time\").hide();\r\n    " +
"                            $(\"#step5time\").show();\r\n                           " +
"     $(\"#step5time\").text(response.EstimatedTime);\r\n                            " +
"    SetProgressDescription(\"Step 5 - Processing in ICS\");\r\n                     " +
"           break;\r\n                            default:\r\n                       " +
"         $(\"#spanDescription\").text(\"Unknown\");\r\n                               " +
" break;\r\n                        }\r\n\r\n                        if (ustatus.Curren" +
"tStep == 5 && response.IsComplete == true) {\r\n                            ustatu" +
"s.InterfaceErrorCount = response.InterfaceErrorCount;\r\n                         " +
"   ustatus.RowErrorCount = response.RowErrorCount;\r\n                            " +
"ustatus.LicsId = response.LicsId;\r\n                            ustatus.Exception" +
" = \"\";\r\n                            if (ustatus.InterfaceErrorCount == 0 && usta" +
"tus.RowErrorCount == 0) {\r\n                                SetProgressDescriptio" +
"n(\"File Load Completed Successfully\");\r\n                                ustatus." +
"Message = \"Success.\"\r\n                                ustatus.IsError = false;\r\n" +
"                            }\r\n                            else {\r\n             " +
"                   SetProgressDescription(\"File Load Complete – with Errors\");\r\n" +
"                                ustatus.Message = \"Data Errors.\"\r\n              " +
"                  ustatus.IsError = true;\r\n                            }\r\n      " +
"                      $(\"#step5time\").hide();\r\n                            $(\"#s" +
"tep5tick\").show();\r\n                            ShowResult(false);\r\n            " +
"            }\r\n                        else {\r\n                            // Wa" +
"it a second before polling again\r\n                            if (continueMonito" +
"ring)\r\n                                setTimeout(\"UploadMonitor();\", 1000);\r\n  " +
"                      }\r\n                    }\r\n                },\r\n            " +
"    error: function (xhr, ajaxOptions, thrownError) {\r\n                    ustat" +
"us.IsError = true;\r\n                    ustatus.Message = \"Error communicating w" +
"ith server.\";\r\n                    ustatus.Exception = (isTest) ? thrownError : " +
"\"\";\r\n                    ShowResult(false);\r\n                }\r\n            });\r" +
"\n        }\r\n\r\n    </script>\r\n");

});

WriteLiteral("\r\n<form");

WriteLiteral(" id=\"validationForm\"");

WriteLiteral(" action=\"Index\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"main upload\"");

WriteLiteral(">\r\n        <table");

WriteLiteral(" cellspacing=\"12\"");

WriteLiteral(">\r\n            <tr>\r\n                <td");

WriteLiteral(" style=\"width:120px;\"");

WriteLiteral("><label");

WriteLiteral(" for=\"ddlInterfaceGroup\"");

WriteLiteral(">Interface Group</label></td>\r\n                <td");

WriteLiteral(" style=\"width:480px;\"");

WriteLiteral(">");

            
            #line 934 "..\..\Views\Uploads\Index.cshtml"
                                    Write(Html.DropDownList("ddlInterfaceGroup", Model.InterfaceGroups, new { id = "ddlInterfaceGroup", style = "width:467px" }));

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                <td></td>\r\n            </tr>\r\n            <tr>\r\n          " +
"      <td><label");

WriteLiteral(" for=\"ddlInterface\"");

WriteLiteral(">Interface</label></td>\r\n                <td>");

            
            #line 939 "..\..\Views\Uploads\Index.cshtml"
               Write(Html.DropDownList("ddlInterface", Model.Interfaces, new { id = "ddlInterface", @class = "validate[required]", style = "width:467px" }));

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                <td");

WriteLiteral(" id=\"tdFileType\"");

WriteLiteral("></td>\r\n            </tr>\r\n            <tr>\r\n                <td><label");

WriteLiteral(" for=\"fakefile\"");

WriteLiteral(">File</label></td>\r\n                <td>\r\n                    <input");

WriteLiteral(" id=\"fakefile\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(" /> <button");

WriteLiteral(" id=\"fakefileButton\"");

WriteLiteral(">Browse...</button>\r\n                    <div");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral("><input");

WriteLiteral(" type=\"file\"");

WriteLiteral(" id=\"file\"");

WriteLiteral(" class=\"validate[required]\"");

WriteLiteral(" /></div>\r\n                </td>\r\n                <td></td>\r\n            </tr>\r\n " +
"           <tr");

WriteLiteral(" id=\"rowCompression\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(">\r\n                <td><label");

WriteLiteral(" for=\"useCompression\"");

WriteLiteral(">Compress</label></td>\r\n                <td>\r\n                    <ul");

WriteLiteral(" class=\"option-group\"");

WriteLiteral(" id=\"useCompression\"");

WriteLiteral(">\r\n                        <li");

WriteLiteral(" id=\"compressYes\"");

WriteLiteral(" class=\"option-selected\"");

WriteLiteral(">Yes</li>\r\n                        <li");

WriteLiteral(" id=\"compressNo\"");

WriteLiteral(">No</li>\r\n                    </ul>\r\n                </td>\r\n                <td><" +
"/td>\r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n          " +
"      <td><button");

WriteLiteral(" id=\"upload\"");

WriteLiteral(">Upload</button></td>\r\n                <td></td>\r\n            </tr>\r\n        </ta" +
"ble>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <div");

WriteLiteral(" id=\"dialog\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(">\r\n            <table");

WriteLiteral(" cellspacing=\"6\"");

WriteLiteral(" style=\"width:100%;\"");

WriteLiteral(">\r\n                <tr>\r\n                    <td");

WriteLiteral(" style=\"width:100px;\"");

WriteLiteral(">Connection</td>\r\n                    <td><strong>");

            
            #line 973 "..\..\Views\Uploads\Index.cshtml"
                            Write((ViewBag.Connection == null) ? string.Empty : ViewBag.Connection.ConnectionName);

            
            #line default
            #line hidden
WriteLiteral("</strong></td>\r\n                    <td");

WriteLiteral(" style=\"width:50px;\"");

WriteLiteral("></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Inte" +
"rface</td>\r\n                    <td><strong><span");

WriteLiteral(" id=\"spanInterface\"");

WriteLiteral("></span></strong></td>\r\n                    <td></td>\r\n                </tr>\r\n   " +
"             <tr>\r\n                    <td>ICS User</td>\r\n                    <t" +
"d><strong>");

            
            #line 983 "..\..\Views\Uploads\Index.cshtml"
                            Write((ViewBag.User == null) ? string.Empty : ViewBag.User.UserName);

            
            #line default
            #line hidden
WriteLiteral("</strong></td>\r\n                    <td></td>\r\n                </tr>\r\n           " +
"     <tr>\r\n                    <td>Filename</td>\r\n                    <td><stron" +
"g><span");

WriteLiteral(" id=\"spanFilename\"");

WriteLiteral("></span></strong></td>\r\n                    <td></td>\r\n                </tr>\r\n   " +
"             <tr>\r\n                    <td>Filesize</td>\r\n                    <t" +
"d><strong><span");

WriteLiteral(" id=\"spanFilesize\"");

WriteLiteral("></span></strong></td>\r\n                    <td></td>\r\n                </tr>\r\n   " +
"             <tr>\r\n                    <td>Step 1</td>\r\n                    <td>" +
"<strong>Initialising upload</strong></td>\r\n                    <td><div");

WriteLiteral(" id=\"step1tick\"");

WriteLiteral(" class=\"tick\"");

WriteLiteral("></div></td>\r\n                </tr>\r\n                <tr>\r\n                    <t" +
"d>Step 2</td>\r\n                    <td><strong>Uploading data</strong></td>\r\n   " +
"                 <td><div");

WriteLiteral(" id=\"step2tick\"");

WriteLiteral(" class=\"tick\"");

WriteLiteral("></div></td>\r\n                </tr>\r\n                <tr>\r\n                    <t" +
"d>Step 3</td>\r\n                    <td><strong>Completing data upload</strong></" +
"td>\r\n                    <td><div");

WriteLiteral(" id=\"step3tick\"");

WriteLiteral(" class=\"tick\"");

WriteLiteral("></div></td>\r\n                </tr>\r\n                <tr>\r\n                    <t" +
"d>Step 4</td>\r\n                    <td><strong>Uploading to ICS</strong></td>\r\n " +
"                   <td><div");

WriteLiteral(" id=\"step4tick\"");

WriteLiteral(" class=\"tick\"");

WriteLiteral("></div><div");

WriteLiteral(" id=\"step4time\"");

WriteLiteral("></div></td>\r\n                </tr>\r\n                <tr>\r\n                    <t" +
"d>Step 5</td>\r\n                    <td><strong>Processing in ICS</strong></td>\r\n" +
"                    <td><div");

WriteLiteral(" id=\"step5tick\"");

WriteLiteral(" class=\"tick\"");

WriteLiteral("></div><div");

WriteLiteral(" id=\"step5time\"");

WriteLiteral("></div></td>\r\n                </tr>\r\n            </table>\r\n            <br />\r\n  " +
"          <div");

WriteLiteral(" id=\"progress\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" id=\"progressbar\"");

WriteLiteral("></div>\r\n                <div");

WriteLiteral(" id=\"progressText\"");

WriteLiteral("></div>\r\n                <br />\r\n            </div>\r\n            <center");

WriteLiteral(" id=\"uploadOptions\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" id=\"cancelUpload\"");

WriteLiteral(">Cancel</button>\r\n            </center>\r\n            <div");

WriteLiteral(" id=\"divResult\"");

WriteLiteral(">\r\n                <table");

WriteLiteral(" cellspacing=\"6\"");

WriteLiteral(" style=\"width:100%;\"");

WriteLiteral(">\r\n                    <tr>\r\n                        <td><strong");

WriteLiteral(" id=\"result\"");

WriteLiteral("></strong></td>\r\n                        <td");

WriteLiteral(" style=\"width:50px;\"");

WriteLiteral(">\r\n                            <div");

WriteLiteral(" class=\"success\"");

WriteLiteral("></div>\r\n                            <div");

WriteLiteral(" class=\"failure\"");

WriteLiteral("></div>\r\n                        </td>\r\n                    </tr>\r\n              " +
"      <tr>\r\n                        <td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral("><p");

WriteLiteral(" id=\"pException2\"");

WriteLiteral("></p></td>\r\n                    </tr>\r\n                </table>\r\n                " +
"<table");

WriteLiteral(" cellspacing=\"6\"");

WriteLiteral(">\r\n                    <tr");

WriteLiteral(" id=\"rowUploadId\"");

WriteLiteral(">\r\n                        <td><strong>Upload ID</strong>:</td>\r\n                " +
"        <td");

WriteLiteral(" id=\"uploadId\"");

WriteLiteral("></td>\r\n                    </tr>\r\n                    <tr");

WriteLiteral(" id=\"rowLicsId\"");

WriteLiteral(">\r\n                        <td><strong>Interface ID</strong>:</td>\r\n             " +
"           <td");

WriteLiteral(" id=\"licsId\"");

WriteLiteral("></td>\r\n                    </tr>\r\n                    <tr");

WriteLiteral(" id=\"rowInterfaceErrors\"");

WriteLiteral(">\r\n                        <td><strong>Interface Errors</strong>:</td>\r\n         " +
"               <td");

WriteLiteral(" id=\"interfaceErrorCount\"");

WriteLiteral("></td>\r\n                    </tr>\r\n                    <tr");

WriteLiteral(" id=\"rowRowErrors\"");

WriteLiteral(">\r\n                        <td><strong>Row Errors</strong>:</td>\r\n               " +
"         <td");

WriteLiteral(" id=\"rowErrorCount\"");

WriteLiteral("></td>\r\n                    </tr>\r\n                    <tr");

WriteLiteral(" id=\"rowDetails\"");

WriteLiteral(">\r\n                        <td><strong>Details</strong>:</td>\r\n                  " +
"      <td><a");

WriteLiteral(" id=\"detailsLink\"");

WriteLiteral(">See interface details</a></td>\r\n                    </tr>\r\n                </tab" +
"le>\r\n            </div>\r\n        </div>\r\n        <div");

WriteLiteral(" id=\"dialogResume\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(">\r\n            <p>There is already an upload in progress for you on this connecti" +
"on:</p>\r\n            <table");

WriteLiteral(" cellspacing=\"8\"");

WriteLiteral(">\r\n                <tr>\r\n                    <td");

WriteLiteral(" style=\"width:100px;\"");

WriteLiteral(">Connection</td>\r\n                    <td><strong>");

            
            #line 1073 "..\..\Views\Uploads\Index.cshtml"
                            Write((ViewBag.Connection == null) ? string.Empty : ViewBag.Connection.ConnectionName);

            
            #line default
            #line hidden
WriteLiteral("</strong></td>\r\n                </tr>\r\n                <tr>\r\n                    " +
"<td>Interface</td>\r\n                    <td><strong>");

            
            #line 1077 "..\..\Views\Uploads\Index.cshtml"
                           Write(Model.InterfaceName);

            
            #line default
            #line hidden
WriteLiteral("</strong></td>\r\n                </tr>\r\n                <tr>\r\n                    " +
"<td>ICS User</td>\r\n                    <td><strong>");

            
            #line 1081 "..\..\Views\Uploads\Index.cshtml"
                            Write((ViewBag.User == null) ? string.Empty : ViewBag.User.UserName);

            
            #line default
            #line hidden
WriteLiteral("</strong></td>\r\n                </tr>\r\n                <tr>\r\n                    " +
"<td>Filename</td>\r\n                    <td><strong>");

            
            #line 1085 "..\..\Views\Uploads\Index.cshtml"
                           Write(Model.FileName);

            
            #line default
            #line hidden
WriteLiteral("</strong></td>\r\n                </tr>\r\n                <tr");

WriteLiteral(" id=\"rowDescriptionResume\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(@">
                    <td>Description</td>
                    <td><strong><span>Cancelling upload</span></strong></td>
                </tr>
            </table>
            <p>To resume this upload, you must select the same file and the file must be unchanged.</p>
            <center");

WriteLiteral(" id=\"resumeOptions\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" id=\"resume\"");

WriteLiteral(">Resume</button>\r\n                &nbsp;\r\n                &nbsp;\r\n               " +
" <button");

WriteLiteral(" id=\"cancel\"");

WriteLiteral(">Cancel</button>\r\n            </center>\r\n        </div>\r\n        <div");

WriteLiteral(" id=\"dialogMessage\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(">\r\n            <strong><p");

WriteLiteral(" id=\"pMessage\"");

WriteLiteral("></p></strong>\r\n            <p");

WriteLiteral(" id=\"pException\"");

WriteLiteral("></p>\r\n        </div>\r\n    </div>\r\n</form>\r\n<br />\r\n");

        }
    }
}
#pragma warning restore 1591
