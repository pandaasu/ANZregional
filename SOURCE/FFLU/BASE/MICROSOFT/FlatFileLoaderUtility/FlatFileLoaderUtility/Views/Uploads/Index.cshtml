@model FlatFileLoaderUtility.ViewModels.FileUploadViewModel

@{
    ViewBag.Title = "File Upload";
}

@section JavascriptImport {
    <script type="text/javascript">

        /**************************************************
        /* Page Variables
        /**************************************************/
        var ustatus = null;
        var fileData = null;
        var inProgressInterfaceCode = "@Model.InterfaceCode";
        var inProgressInterfaceName = "@Model.InterfaceName";
        var inProgressFileName = "@Model.FileName";
        var inProgressFileSize = @Model.FileSize;
        var inProgressLastSegment = @Model.LastSegment;
        var isResuming = false;
        var isModernBrowser = (window.File && window.FileReader && window.Blob);
        var doCancel = false;
        var continueMonitoring = true;

        /**************************************************
        /* Document Ready
        /**************************************************/
        $(document).ready(function () {
            // Plugin instantiation
            $("#ddlInterfaceGroup").chosen({ search_contains: true });
            $("#ddlInterface").chosen({ search_contains: true });

            // Event Listeners
            $("#ddlInterfaceGroup").change(function () {
                GetInterfaceOptions($(this).val(), "*INBOUND", $("#ddlInterface"), true, false);
            });

            $("#ddlInterface").change(function () {
                $("#tdFileType").html("");

                if ($(this).val() == "")
                    return;

                $.ajax({
                    type: "post",
                    url: "/Base/GetInterfaceDetails",
                    data: {
                        interfaceCode: $(this).val()
                    },
                    async: true,
                    success: function (response) {
                        if (response.Result != "OK") {
                            $("#tdFileType").html(response.Message);
                        }
                        else {
                            $("#tdFileType").html("Expected file type: <strong>" + response.Data.FileType + "</strong>" + ((response.Data.FileType == "csv" || response.Data.FileType == "tab") ? ", and qualifier: <strong>" + response.Data.CsvQualifier + "</strong>" : ""));
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        $("#tdFileType").html("Expected file type for this interface could not be determined");
                    }
                });
            });

            $("#validationForm").validationEngine("attach", {
                prettySelect : true,
                useSuffix: "_chzn"
            });

            $("#file").change(function () {
                $("#fakefile").val($("#file").val().replace(/C:\\fakepath\\/i, ''));
                if (isModernBrowser) {
                    fileData = this.files[0];
                }
            });

            $("#fakefile").click(function () {
                $("#file").click();
                return false;
            });

            $("#fakefileButton").click(function () {
                $("#file").click();
                return false;
            });

            $("#upload").click(function () {
                // Validate inputs
                // This will ensure that both an interface and a file have been selected
                if (!$("#validationForm").validationEngine("validate"))
                    return false;

                // Instantiate a Status object to hold the upload state
                ustatus = new UStatus();
                ustatus.InterfaceCode = $("#ddlInterface").val();
                ustatus.FilePath = $("#file").val().replace(/C:\\fakepath\\/i, '');
                ustatus.FileName = ustatus.FilePath.split("\\").pop();
                ustatus.SegmentBytes = @ViewBag.SegmentBytes;

                // The filename cannot exceed 64 characters
                if (ustatus.FileName.length > 64) {
                    ustatus.Message = "The filename cannot exceed 64 characters.";
                    ustatus.IsError = true;
                    ShowResult(true);
                    return false;
                }

                // Initiate the upload.
                // Browsers supporting HTML5 perform the file reading asynchronously
                // So this is the last function that can be called from the upload click eventhandler
                UploadInitiate();

                return false;
            });

            $("#cancelUpload").click(function () {
                $(this).attr("disabled", "disabled");
                $("#uploadOptions").hide();
                doCancel = true;
                return false;
            });

            $("#cancel").click(function () {
                $("form :input").attr("disabled", "disabled").trigger("liszt:updated");
                $("#resumeOptions").hide();
                $("#rowDescriptionResume").show();
                UploadCancel(false);
                return false;
            });

            $("#resume").click(function () {
                $("#ddlInterface").val(inProgressInterfaceCode);
                $("#ddlInterface").attr("disabled", "disabled").trigger("liszt:updated");
                $("#ddlInterfaceGroup").attr("disabled", "disabled").trigger("liszt:updated");
                $(".ui-dialog-content").dialog("destroy");
                $("#file").click();
                isResuming = true;
                return false;
            });

            // Document ready actions
            if (inProgressInterfaceCode != "") {
                $("#dialogResume").dialog({
                    modal: true
                });
            }
        });

        /**************************************************
        /* Page Functions
        /**************************************************/
        
        // Called to cancel an upload
        function UploadCancel(silentCancel) {
            var doSilentCancel = silentCancel;
            $.ajax({
                type: "post",
                url: "/Uploads/Cancel",
                contentType: "application/json",
                async: true,
                success: function (response) {
                    if (doSilentCancel)
                        return;
                    if (response.Result != "OK") {
                        ustatus.Message = "Error while cancelling the upload.";
                        ustatus.Exception = response.Message;
                        ustatus.UploadId = response.UploadId;
                        ustatus.LicsId = response.LicsId;
                        ustatus.IsError = true;
                        ShowResult(true);
                    }
                    else {
                        ustatus.Message = "Upload successfully cancelled.";
                        ustatus.Exception = "";
                        ShowResult(true);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    if (doSilentCancel)
                        return;
                    ustatus.Message = "Error communicating with server.";
                    ustatus.Exception = (isTest) ? thrownError : "";
                    ustatus.IsError = true;
                    ShowResult(true);
                }
            });

            doCancel = false;
        }

        // Called to initiate an upload
        function UploadInitiate() {
            // First, disable the form so that the user can't click the button again
            $("form :input:not(#cancelUpload)").attr("disabled", "disabled").trigger("liszt:updated");

            if (isResuming && ustatus.FileName != inProgressFileName) {
                ustatus.Message = "Filename does not match. Cannot resume without the same file.";
                ustatus.Exception = "";
                ustatus.IsError = true;
                ShowResult(true);
                return;
            }
            if (isResuming && fileData != null && fileData.size != inProgressFileSize) {
                ustatus.Message = "File size does not match original upload. Cannot resume without the same file.";
                ustatus.Exception = "";
                ustatus.IsError = true;
                ShowResult(true);
                return;
            }

            // Then, show the progress indicator
            $("#spanInterface").text($("#ddlInterface option:selected").text());
            $("#spanFilename").text(ustatus.FileName);
            if (fileData != null) {
                ustatus.FileSize = fileData.size;
                $("#spanFilesize").text(addCommas(parseInt(Math.ceil(parseFloat(ustatus.FileSize)/1024))) + " kB");
            }
            $("#uploadOptions").show();
            $("#divResult").hide();
            $("#step1tick").hide();
            $("#step2tick").hide();
            $("#step3tick").hide();
            $("#step4tick").hide();
            $("#step5tick").hide();
            $("#step4time").hide();
            $("#step5time").hide();
            $(".failure").hide();
            $(".success").hide();
            $(".failureProgress").removeClass("failureProgress");
            $(".successProgress").removeClass("successProgress");
            SetProgressDescription("Step 1 - Initialising upload");

            $("#dialog").dialog({
                modal: true,
                height: "auto",
                close: function (event, ui) {
                    continueMonitoring = false;
                },
                buttons: {}
            });
            $("#progressbar").progressbar({
                value: 0
            });
            
            continueMonitoring = true;

            // Now initiate the upload
            // This will also confirm that the correct filetype has been selected for the given interface
            if (!isResuming) {
                $.ajax({
                    type: "post",
                    url: "/Uploads/Start",
                    contentType: "application/json",
                    data: JSON.stringify({
                        interfaceCode: ustatus.InterfaceCode,
                        filename: ustatus.FileName
                    }),
                    async: true,
                    success: function (response) {
                        if (response.Result != "OK") {
                            ustatus.IsError = true;
                            ustatus.Message = "Error starting the upload.";
                            ustatus.Exception = response.Message;
                            ShowResult(false);
                        }
                        else {
                            UploadInitiateCallback();
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        ustatus.IsError = true;
                        ustatus.Message = "Error communicating with server.";
                        ustatus.Exception = (isTest) ? thrownError : "";
                        ShowResult(false);
                    }
                });
            }
            else {
                UploadInitiateCallback();
            }
        }

        function SetProgressDescription(description) {
            $("#progressText").text(description);
        }

        // Callback function for initiating an upload
        function UploadInitiateCallback() {
            ustatus.CurrentStep++;
            $("#step1tick").show();
            SetProgressDescription("Step 2 - Uploading data");

            // Next, start uploading the segments.
            // This hs handled differently depending on whether or not the browser supports the necessary HTML5 elements.
            // If not, then it has to use ActiveX (which means Internet Explorer)
            if (isModernBrowser) {
                var fr = new FileReader();

                fr.onload = function (e) {
                    ustatus.Remainder = e.target.result;
                    ustatus.TotalLength = ustatus.Remainder.length;

                    if (ustatus.TotalLength == 0) {
                        SetNoMoreSegments();
                    }
                    else {
                        ProcessSegment();
                    }
                };

                fr.readAsText(fileData, "UTF-8");
            }
            else if (ActiveXObject) {
                
                var fso = new ActiveXObject("Scripting.FileSystemObject");
                ustatus.TotalLength = fso.getFile(ustatus.FilePath).size;
                ustatus.FileSize = ustatus.TotalLength;
                ustatus.File = fso.OpenTextFile(ustatus.FilePath, 1, false, -1); // -1 = Unicode
                ustatus.NeedsEncodingFix = true;

                if (isResuming && ustatus.FileSize != inProgressFileSize && inProgressFileSize > 0) {
                    ustatus.File.Close();
                    ustatus.Message = "File size does not match original upload. Cannot resume without the same file.";
                    ustatus.Exception = "";
                    ustatus.IsError = true;
                    ShowResult(true);
                    return;
                }

                // Now that the file is accessed, the size is available
                $("#spanFilesize").text(addCommas(parseInt(Math.ceil(parseFloat(ustatus.TotalLength)/1024))) + " kB");
                
                if (ustatus.TotalLength == 0) {
                    ustatus.File.Close();
                    SetNoMoreSegments();
                }
                else {
                    ProcessSegment();
                }
            }
        }

        // Called to process a file segment. Called iteratively until file is fully processed
        function ProcessSegment()
        {
            if (doCancel) {
                SetProgressDescription("Cancelling upload");
                UploadCancel(false);
            }
            else if (isModernBrowser) {
                if (ustatus.Remainder.length == 0) {
                    // The upload phase is complete, now monitor the progress
                    UploadMonitor();
                }
                else {
                    while (ustatus.Remainder.length > 0) {
                        if (ustatus.Remainder.length > ustatus.SegmentBytes - ustatus.MaxRowSize - 10) {
                            var index = ustatus.SegmentBytes - ustatus.MaxRowSize - 10;
                            while (index < ustatus.Remainder.length && ustatus.Remainder[index] != "\n") {
                                index++;
                                if (index > ustatus.SegmentBytes) {
                                    // The line exceeds the maximum line length. Terminate upload process.
                                    ustatus.IsError = true;
                                    ustatus.Message = "End of line not found within maximum line length."
                                    ustatus.Exception = "Please check line length and end of line encoding in the file."
                                    UploadCancel(true);
                                    ShowResult(false);
                                    return;
                                }
                            }
                            index++;
                            segment = ustatus.Remainder.substring(0, index);
                            ustatus.Remainder = ustatus.Remainder.substr(index);
                        }
                        else {
                            segment = ustatus.Remainder;
                            ustatus.Remainder = "";
                        }
                        ustatus.SegmentCount++;
                        
                        ustatus.ProcessedLength = ustatus.TotalLength - ustatus.Remainder.length;
                        $("#progressbar").progressbar("value", ustatus.ProcessedLength * 100 / ustatus.TotalLength);

                        if (!isResuming || ustatus.SegmentCount > inProgressLastSegment) {
                            UploadSegment(segment, ustatus.Remainder.length <= 0);
                            return;
                        }
                    }
                    // this is for the case where a file is resumed after the last segment is actually uploaded
                    UploadMonitor();
                }
            }
            else {
                if (ustatus.File.AtEndOfStream) {
                    ustatus.File.Close();

                    // The upload phase is complete, now monitor the progress
                    UploadMonitor();
                }
                else {
                    while (!ustatus.File.AtEndOfStream) {
                        var aryData = new Array();
                        var x = 0;
                        if (ustatus.DanglingChar != "") {
                            aryData[x++] = ustatus.DanglingChar;
                            ustatus.DanglingChar = "";
                        }
                        aryData[x++] = ustatus.File.Read(ustatus.SegmentBytes - ustatus.MaxRowSize - 10);
                        while (!ustatus.File.AtEndOfStream) {
                            var c = ustatus.File.Read(1);
                            var code = c.charCodeAt(0);
                            // It's read 16 bits, so have to mask all but the lower 8 bits to read read ASCII character (10 == newline)
                            // There's also a possibility that the newline will be in the upper half, so have to shift 8 bits.
                            // But in that case, the lower byte would need to be preserved for the next segment
                            //alert("upper: " + String.fromCharCode(code & 0xFF) + "(" + (code & 0xFF) + "), lower: " + String.fromCharCode(code >> 8) + "(" + (code >> 8) + ")")
                            if ((code & 0xFF) == 10) {
                                aryData[x++] = String.fromCharCode((13 << 8) + 10);
                                ustatus.DanglingChar = String.fromCharCode((13 << 8) + (code >> 8));
                                break;
                            }
                            if ((code >> 8) == 10) {
                                aryData[x++] = c;
                                break;
                            }
                            aryData[x++] = c;

                            if (x > (ustatus.MaxRowSize / 2) + 5) {
                                // The line exceeds the maximum line length. Terminate upload process.
                                ustatus.File.Close();
                                ustatus.IsError = true;
                                ustatus.Message = "End of line not found within maximum line length."
                                ustatus.Exception = "Please check line length and end of line encoding in the file."
                                UploadCancel(true);
                                ShowResult(false);
                                return;
                            }
                        }
                        ustatus.SegmentCount++;

                        var segment = aryData.join('');
                        ustatus.ProcessedLength += segment.length;

                        // ProcessedLength * 200 percent because the data is read 2 bytes at a time
                        $("#progressbar").progressbar("value", ustatus.ProcessedLength * 200 / ustatus.TotalLength);

                        if (!isResuming || ustatus.SegmentCount > inProgressLastSegment) {
                            UploadSegment(segment, ustatus.File.AtEndOfStream);
                            return;
                        }
                    }

                    // this is for the case where a file is resumed after the last segment is actually uploaded
                    ustatus.File.Close();

                    // The upload phase is complete, now monitor the progress
                    UploadMonitor();
                }
            }
        }

        // Called to upload segment to server
        function UploadSegment(segmentData, isFinalSegment) {
            $.ajax({
                type: "post",
                url: "/Uploads/Segment",
                contentType: "application/json",
                data: JSON.stringify({
                    interfaceCode: ustatus.InterfaceCode,
                    filename: ustatus.FileName,
                    segmentData: segmentData,
                    isFinalSegment: isFinalSegment,
                    fileSize: ustatus.FileSize,
                    needsEncodingFix: ustatus.NeedsEncodingFix
                }),
                async: true,
                success: function (response) {
                    if (response.Result != "OK") {
                        ustatus.IsError = true;
                        ustatus.Message = "Error while uploading file segment."
                        ustatus.Exception = response.Message;
                        ustatus.UploadId = response.UploadId;
                        ustatus.LicsId = response.LicsId;
                        ShowResult(false);
                    }
                    else {
                        ProcessSegment();
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    ustatus.IsError = true;
                    ustatus.Message = "Error communicating with server.";
                    ustatus.Exception = (isTest) ? thrownError : "";
                    ShowResult(false);
                }
            });
        }

        // Called to indicate that there will be no more segments uploaded
        // Used only when the uploaded file has a size of 0 bytes
        function SetNoMoreSegments() {
            $.ajax({
                type: "post",
                url: "/Uploads/SetNoMoreSegments",
                contentType: "application/json",
                data: JSON.stringify({
                    interfaceCode: ustatus.InterfaceCode,
                    filename: ustatus.FileName
                }),
                async: true,
                success: function (response) {
                    if (response.Result != "OK") {
                        ustatus.IsError = true;
                        ustatus.Message = "Error while setting file upload complete."
                        ustatus.Exception = response.Message;
                        ustatus.UploadId = response.UploadId;
                        ustatus.LicsId = response.LicsId;
                        ShowResult(false);
                    }
                    else {
                        UploadMonitor();
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    ustatus.IsError = true;
                    ustatus.Message = "Error communicating with server.";
                    ustatus.Exception = (isTest) ? thrownError : "";
                    ShowResult(false);
                }
            });
        }

        // Called to show the result of an operation
        function ShowResult(useNewDialog) {
            // Re-enable the form underneath the dialog
            if (!ustatus.IsError) {
                $("#ddlInterface").val("").change();
                $("#fakefile").val("");
                resetFormElement($("#file"));
            }
            $("form :input").removeAttr("disabled").trigger("liszt:updated");
            
            if (useNewDialog) {
                // Remove any existing progress bars or dialog windows
                $(".ui-progressbar").progressbar("destroy");
                $(".ui-dialog-content").dialog("destroy");

                // Set the message an exception text
                $("#pMessage").text(ustatus.Message);
                if (ustatus.Exception != "") {
                    $("#pException").text(ustatus.Exception);
                    $("#pException").show();
                }
                else {
                    $("#pException").hide();
                }

                // Show the dialog
                $("#dialogMessage").dialog({
                    modal: true,
                    title: (ustatus.IsError) ? "Error" : "Message",
                    buttons: {
                        Ok: function() {
                            $(this).dialog("close");
                        }
                    }
                });
            }
            else {
                $("#divResult").show();
                $("#uploadOptions").hide();

                $("#result").text(ustatus.Message);
                if (ustatus.Exception != "") {
                    $("#pException2").text(ustatus.Exception);
                    $("#pException2").show();
                }
                else {
                    $("#pException2").hide();
                }

                // Show the upload id if available and if in test mode
                if (isTest && ustatus.UploadId > 0) {
                    $("#rowUploadId").show();
                    $("#uploadId").text(ustatus.UploadId);
                }
                else {
                    $("#rowUploadId").hide();
                }

                // Show the LICS id if it is available
                if (ustatus.LicsId > 0) {
                    $("#rowLicsId").show();
                    $("#licsId").text(ustatus.LicsId);
                    $("#rowInterfaceErrors").show();
                    $("#interfaceErrorCount").text(ustatus.InterfaceErrorCount);
                    $("#rowRowErrors").show();
                    $("#rowErrorCount").text(ustatus.RowErrorCount);
                    $("#rowDetails").show();
                    $("#detailsLink").attr("href", "/Monitor/View/" + ustatus.LicsId);
                }
                else {
                    $("#rowLicsId").hide();
                    $("#rowInterfaceErrors").hide();
                    $("#rowRowErrors").hide();
                    $("#rowDetails").hide();
                }

                $("#progressbar").progressbar("value", 100);
                if (ustatus.IsError) {
                    $("#progressbar > div").addClass("failureProgress");
                    $(".failure").show();
                }
                else {
                    $("#progressbar > div").addClass("successProgress");
                    $(".success").show();
                }

                $("#dialog").dialog({
                    buttons: {
                        Ok: function() {
                            $(this).dialog("close");
                        }
                    }
                });
                $("#dialog").dialog("option", "position", "center");
            }
        }

        // Called to monitor the status of an ongoing upload after all segments have been sent to the server
        function UploadMonitor() {
            
            // Poll the status and update the display until it's finished
            
            if (ustatus.IsError || !continueMonitoring)
                return;
            
            $("#uploadOptions").hide();

            $.ajax({
                type: "post",
                url: "/Uploads/GetStatus",
                contentType: "application/json",
                async: true,
                success: function (response) {
                    if (response.Result != "OK") {
                        ustatus.IsError = true;
                        ustatus.Message = "Error while monitoring upload ustatus."
                        ustatus.Exception = response.Message;
                        ustatus.UploadId = response.UploadId;
                        ustatus.LicsId = response.LicsId;
                        ShowResult(false);
                    }
                    else {

                        ustatus.CurrentStep = response.CurrentStep;
                        if (response.Total > 0 && response.Current > 0)
                            $("#progressbar").progressbar("value", response.Current * 100 / response.Total);

                        // It can be a long time on "0" progress...
                        // To let the user know that stuff is still happening, if it's 0 just increment the progressbar
                        if (response.Current == 0 && ustatus.CurrentStep > 3) {
                            var currentValue = $("#progressbar").progressbar("value");
                            currentValue = (currentValue == 100 || isNaN(currentValue)) ? 0 : currentValue + 5;
                            $("#progressbar").progressbar("value", currentValue);
                        }

                        switch(ustatus.CurrentStep) {
                            case 3:
                                $("#step2tick").show();
                                SetProgressDescription("Step 3 - Completing data upload");
                                break;
                            case 4:
                                $("#step2tick").show();
                                $("#step3tick").show();
                                $("#step4time").show();
                                $("#step4time").text(response.EstimatedTime);
                                // From here, the user is free to upload another file, so re-enable the form
                                $("form :input").removeAttr("disabled").trigger("liszt:updated");
                                SetProgressDescription("Step 4 - Uploading to ICS");
                                break;
                            case 5:
                                $("#step2tick").show();
                                $("#step3tick").show();
                                $("#step4tick").show();
                                $("#step4time").hide();
                                $("#step5time").show();
                                $("#step5time").text(response.EstimatedTime);
                                SetProgressDescription("Step 5 - Processing in ICS");
                                break;
                            default:
                                $("#spanDescription").text("Unknown");
                                break;
                        }

                        if (ustatus.CurrentStep == 5 && response.IsComplete == true) {
                            ustatus.InterfaceErrorCount = response.InterfaceErrorCount;
                            ustatus.RowErrorCount = response.RowErrorCount;
                            ustatus.LicsId = response.LicsId;
                            ustatus.Exception = "";
                            if (ustatus.InterfaceErrorCount == 0 && ustatus.RowErrorCount == 0) {
                                SetProgressDescription("File Load Completed Successfully");
                                ustatus.Message = "Success."
                                ustatus.IsError = false;
                            }
                            else {
                                SetProgressDescription("File Load Complete – with Errors");
                                ustatus.Message = "Data Errors."
                                ustatus.IsError = true;
                            }
                            $("#step5time").hide();
                            $("#step5tick").show();
                            ShowResult(false);
                        }
                        else {
                            // Wait a second before polling again
                            if (continueMonitoring)
                                setTimeout("UploadMonitor();", 1000);
                        }
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    ustatus.IsError = true;
                    ustatus.Message = "Error communicating with server.";
                    ustatus.Exception = (isTest) ? thrownError : "";
                    ShowResult(false);
                }
            });
        }

    </script>
}

<form id="validationForm" action="Index">
    <div class="main upload">
        <table cellspacing="12">
            <tr>
                <td style="width:120px;"><label for="ddlInterfaceGroup">Interface Group</label></td>
                <td style="width:480px;">@Html.DropDownList("ddlInterfaceGroup", Model.InterfaceGroups, new { id = "ddlInterfaceGroup", style = "width:467px" })</td>
                <td></td>
            </tr>
            <tr>
                <td><label for="ddlInterface">Interface</label></td>
                <td>@Html.DropDownList("ddlInterface", Model.Interfaces, new { id = "ddlInterface", @class = "validate[required]", style = "width:467px" })</td>
                <td id="tdFileType"></td>
            </tr>
            <tr>
                <td><label for="fakefile">File</label></td>
                <td>
                    <input id="fakefile" type="text" /> <button id="fakefileButton">Browse...</button>
                    <div style="display:none;"><input type="file" id="file" class="validate[required]" /></div>
                </td>
                <td></td>
            </tr>
            <tr>
                <td></td>
                <td><button id="upload">Upload</button></td>
                <td></td>
            </tr>
        </table>
        <br />
        <br />
        <br />
        <div id="dialog" style="display:none;">
            <table cellspacing="6" style="width:100%;">
                <tr>
                    <td style="width:100px;">Connection</td>
                    <td><strong>@((ViewBag.Connection == null) ? string.Empty : ViewBag.Connection.ConnectionName)</strong></td>
                    <td style="width:50px;"></td>
                </tr>
                <tr>
                    <td>Interface</td>
                    <td><strong><span id="spanInterface"></span></strong></td>
                    <td></td>
                </tr>
                <tr>
                    <td>ICS User</td>
                    <td><strong>@((ViewBag.User == null) ? string.Empty : ViewBag.User.UserName)</strong></td>
                    <td></td>
                </tr>
                <tr>
                    <td>Filename</td>
                    <td><strong><span id="spanFilename"></span></strong></td>
                    <td></td>
                </tr>
                <tr>
                    <td>Filesize</td>
                    <td><strong><span id="spanFilesize"></span></strong></td>
                    <td></td>
                </tr>
                <tr>
                    <td>Step 1</td>
                    <td><strong>Initialising upload</strong></td>
                    <td><div id="step1tick" class="tick"></div></td>
                </tr>
                <tr>
                    <td>Step 2</td>
                    <td><strong>Uploading data</strong></td>
                    <td><div id="step2tick" class="tick"></div></td>
                </tr>
                <tr>
                    <td>Step 3</td>
                    <td><strong>Completing data upload</strong></td>
                    <td><div id="step3tick" class="tick"></div></td>
                </tr>
                <tr>
                    <td>Step 4</td>
                    <td><strong>Uploading to ICS</strong></td>
                    <td><div id="step4tick" class="tick"></div><div id="step4time"></div></td>
                </tr>
                <tr>
                    <td>Step 5</td>
                    <td><strong>Processing in ICS</strong></td>
                    <td><div id="step5tick" class="tick"></div><div id="step5time"></div></td>
                </tr>
            </table>
            <br />
            <div id="progress">
                <div id="progressbar"></div>
                <div id="progressText"></div>
                <br />
            </div>
            <center id="uploadOptions">
                <button id="cancelUpload">Cancel</button>
            </center>
            <div id="divResult">
                <table cellspacing="6" style="width:100%;">
                    <tr>
                        <td><strong id="result"></strong></td>
                        <td style="width:50px;">
                            <div class="success"></div>
                            <div class="failure"></div>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2"><p id="pException2"></p></td>
                    </tr>
                </table>
                <table cellspacing="6">
                    <tr id="rowUploadId">
                        <td><strong>Upload ID</strong>:</td>
                        <td id="uploadId"></td>
                    </tr>
                    <tr id="rowLicsId">
                        <td><strong>Interface ID</strong>:</td>
                        <td id="licsId"></td>
                    </tr>
                    <tr id="rowInterfaceErrors">
                        <td><strong>Interface Errors</strong>:</td>
                        <td id="interfaceErrorCount"></td>
                    </tr>
                    <tr id="rowRowErrors">
                        <td><strong>Row Errors</strong>:</td>
                        <td id="rowErrorCount"></td>
                    </tr>
                    <tr id="rowDetails">
                        <td><strong>Details</strong>:</td>
                        <td><a id="detailsLink">See interface details</a></td>
                    </tr>
                </table>
            </div>
        </div>
        <div id="dialogResume" style="display:none;">
            <p>There is already an upload in progress for you on this connection:</p>
            <table cellspacing="8">
                <tr>
                    <td style="width:100px;">Connection</td>
                    <td><strong>@((ViewBag.Connection == null) ? string.Empty : ViewBag.Connection.ConnectionName)</strong></td>
                </tr>
                <tr>
                    <td>Interface</td>
                    <td><strong>@Model.InterfaceName</strong></td>
                </tr>
                <tr>
                    <td>ICS User</td>
                    <td><strong>@((ViewBag.User == null) ? string.Empty : ViewBag.User.UserName)</strong></td>
                </tr>
                <tr>
                    <td>Filename</td>
                    <td><strong>@Model.FileName</strong></td>
                </tr>
                <tr id="rowDescriptionResume" style="display:none;">
                    <td>Description</td>
                    <td><strong><span>Cancelling upload</span></strong></td>
                </tr>
            </table>
            <p>To resume this upload, you must select the same file and the file must be unchanged.</p>
            <center id="resumeOptions">
                <button id="resume">Resume</button>
                &nbsp;
                &nbsp;
                <button id="cancel">Cancel</button>
            </center>
        </div>
        <div id="dialogMessage" style="display:none;">
            <strong><p id="pMessage"></p></strong>
            <p id="pException"></p>
        </div>
    </div>
</form>
<br />
