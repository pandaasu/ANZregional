/******************/
/* Package Header */
/******************/
create or replace package fcst_processing as

   /******************************************************************************/
   /* Package Definition                                                         */
   /******************************************************************************/
   /**
    System  : ips
    Package : fcst_processing
    Owner   : df_app
    Author  : Jonathan Girling

    Description
    -----------
    Integrated Planning Demand Financials - Forecast Processing 

    This package contain the load and aggregation procedures for sales data. The package exposes
    one procedure PROCESS that performs the load and aggregation based on the following parameters:

    1. PAR_ACTION (*DEMAND_FINAL, *DEMAND_DRAFT, *SUPPLY_FINAL, *SUPPLY_DRAFT) (MANDATORY)

       The processing action that controls the forecast processing.

    2. PAR_FILEID (file identifier number) (MANDATORY)

       The file identifier generated by the interface loader of the file containing the forecast data.

    **notes**
    1. A web log is produced under the search value DF_FCST_PROCESSING where all errors are logged.

    2. All errors will raise an exception to the calling application so that an alert can
       be raised.

    YYYY/MM   Author             Description
    -------   ------             -----------
    2008/08   Jonathan Girling   Created
    2008/12   Steve Gregan       Modified for parallel processing

   *******************************************************************************/

   /*-*/
   /* Public declarations
   /*-*/
   procedure process(par_action in varchar2, par_file_id in number);
   procedure email_forecast(par_fcst_id in number);
   procedure review_creation(par_fcst_id in number);
   procedure venus_extract(par_fcst_id in number);
   function remove_file(i_file_id in common.st_id, o_result_msg out common.st_message_string) return common.st_result;

end fcst_processing; 
/

/****************/
/* Package Body */
/****************/
create or replace package body fcst_processing as

   /*-*/
   /* Private exceptions 
   /*-*/
   application_exception exception;
   pragma exception_init(application_exception, -20000);

   /*-*/
   /* Private declarations
   /*-*/
   procedure process_demand_file(par_file_id in number, par_dmnd_file in varchar2, par_sply_file in varchar2);
   procedure process_supply_file(par_file_id in number, par_dmnd_file in varchar2, par_sply_file in varchar2);

   /***********************************************/
   /* This procedure performs the process routine */
   /***********************************************/
   procedure process(par_action in varchar2, par_file_id in number) is

      /*-*/
      /* Local definitions
      /*-*/
      var_exception varchar2(4000);
      var_log_prefix varchar2(256);
      var_log_search varchar2(256);
      var_loc_string varchar2(128);
      var_alert varchar2(256);
      var_email varchar2(256);
      var_locked boolean;
      var_errors boolean;
      var_result_msg varchar2(3900);

      /*-*/
      /* Local constants
      /*-*/
      con_function constant varchar2(128) := 'DF Forecast Aggregation';

      /*-*/
      /* Local cursors
      /*-*/
      cursor csr_load_file is
         select t01.*
           from load_file t01
          where t01.file_id = par_file_id;
      rcd_load_file csr_load_file%rowtype;

      cursor csr_moe_setting is
         select t01.moe_code,
                t1.sply_file,
                t1.dmnd_file,
                t2.fcst_id
           from moe_setting t01,
                fcst t02
          where t01.moe_code = rcd_load_file.moe_code;
      rcd_moe_setting csr_moe_setting%rowtype;

   /*-------------*/
   /* Begin block */
   /*-------------*/
   begin

      /*-*/
      /* Required for invoked functions
      /*-*/
      logit.enter_method('FCST_PROCESSING', 'PROCESS');

      /*-*/
      /* Initialise the procedure
      /*-*/
      var_log_prefix := 'DF - FORECAST_PROCESSING';
      var_log_search := 'DF_FORECAST_PROCESSING' || '_' || lics_stream_processor.callback_event;
      var_loc_string := lics_stream_processor.callback_lock;
      var_alert := lics_stream_processor.callback_alert;
      var_email := lics_stream_processor.callback_email;
      var_errors := false;
      var_locked := false;
      if var_loc_string is null then
         raise_application_error(-20000, 'Stream lock not returned - must be executed from the ICS Stream Processor');
      end if;

      /*-*/
      /* Validate the parameters
      /*-*/
      if upper(par_action) != '*DEMAND_FINAL' and
         upper(par_action) != '*DEMAND_DRAFT' and
         upper(par_action) != '*SUPPLY_FINAL' and
         upper(par_action) != '*SUPPLY_DRAFT' then
         raise_application_error(-20000, 'Action parameter (' || par_action || ') must be *DEMAND_FINAL, *DEMAND_DRAFT, *SUPPLY_FINAL or *SUPPLY_DRAFT');
      end if;
      if par_fileid is null then
         raise_application_error(-20000, 'File identifier must be supplied');
      end if;
      /*-*/
      open csr_load_file;
      fetch csr_load_file into rcd_load_file;
      if csr_load_file%notfound then
         raise_application_error(-20000, 'File id ' || to_char(par_file_id) || ' not found on the load file table');
      end if;
      close csr_load_file;
      /*-*/
      open csr_moe_setting;
      fetch csr_moe_setting into rcd_moe_setting;
      if csr_moe_setting%notfound then
         raise_application_error(-20000, 'Moe code ' || rcd_load_file.moe_code || ' not found on the moe setting table');
      end if;
      close csr_moe_setting;

      /*-*/
      /* Log start
      /*-*/
      lics_logging.start_log(var_log_prefix, var_log_search);

      /*-*/
      /* Begin procedure
      /*-*/
      lics_logging.write_log('Begin - Demand Financials Forecast Processing - Parameters(' || upper(par_action) || ' + ' || to_char(par_file_id) || ' + ' || rcd_load_file.moe_code || ')');

      /*-*/
      /* Request the lock on the processing
      /*-*/
      begin
         lics_locking.request(var_loc_string);
         var_locked := true;
      exception
         when others then
            var_errors := true;
            lics_logging.write_log(substr(SQLERRM, 1, 1024));
      end;

      /*-*/
      /* Process when lock secured
      /*-*/
      if var_locked = true then

         /*-*/
         /* Execute the requested procedure
         /*-*/
         begin
            cvar_fcst_id := 0;
            cvar_fcst_valid := false;
            if upper(par_action) = '*DEMAND_FINAL' then
               process_demand_file(par_file_id,rcd_moe_setting.dmnd_file,rcd_moe_setting.sply_file);
            elsif upper(par_action) = '*DEMAND_DRAFT' then
               process_demand_file(par_file_id,rcd_moe_setting.dmnd_file,rcd_moe_setting.sply_file);
            elsif upper(par_action) = '*SUPPLY_FINAL' then
               process_supply_file(par_file_id,rcd_moe_setting.dmnd_file,rcd_moe_setting.sply_file);
            elsif upper(par_action) = '*SUPPLY_DRAFT' then
               process_supply_file(par_file_id,rcd_moe_setting.dmnd_file,rcd_moe_setting.sply_file);
            end if;
         exception
            when others then
               var_errors := true;
         end;

         /*-*/
         /* Release the lock on the processing
         /*-*/
         lics_locking.release(var_loc_string);

      end if;
      var_locked := false;

      /*-*/
      /* End procedure
      /*-*/
      lics_logging.write_log('End - Demand Financials Forecast Processing');

      /*-*/
      /* Log end
      /*-*/
      lics_logging.end_log;

      /*-*/
      /* Required for invoked functions
      /*-*/
      logit.leave_method;

      /*-*/
      /* Errors
      /*-*/
      if var_errors = true then

         /*-*/
         /* Alert and email
         /*-*/
         if not(trim(var_alert) is null) and trim(upper(var_alert)) != '*NONE' then
            lics_notification.send_alert(var_alert);
         end if;
         if not(trim(var_email) is null) and trim(upper(var_email)) != '*NONE' then
            lics_notification.send_email(dw_parameter.system_code,
                                         dw_parameter.system_unit,
                                         dw_parameter.system_environment,
                                         con_function,
                                         'DF_FCST_PROCESSING',
                                         var_email,
                                         'One or more errors occurred during the Demand Financials Forecast Processing execution - refer to web log - ' || lics_logging.callback_identifier);
         end if;

         /*-*/
         /* Raise an exception to the caller
         /*-*/
         raise_application_error(-20000, '**LOGGED ERROR**');

      end if;

   /*-------------------*/
   /* Exception handler */
   /*-------------------*/
   exception

      /**/
      /* Exception trap
      /**/
      when others then

         /*-*/
         /* Rollback the database
         /*-*/
         rollback;

         /*-*/
         /* Save the exception
         /*-*/
         var_exception := substr(SQLERRM, 1, 2048);

         /*-*/
         /* Log error
         /*-*/
         if lics_logging.is_created = true then
            lics_logging.write_log('**FATAL ERROR** - ' || var_exception);
            lics_logging.end_log;
         end if;

         /*-*/
         /* Required for invoked functions
         /*-*/
         logit.leave_method;

         /*-*/
         /* Release the lock when required
         /*-*/
         if var_locked = true then
            lics_locking.release(var_loc_string);
         end if;

         /*-*/
         /* Raise an exception to the calling application
         /*-*/
         raise_application_error(-20000, 'FATAL ERROR - DF_FCST_PROCESSING - ' || var_exception);

   /*-------------*/
   /* End routine */
   /*-------------*/
   end process;

   /***********************************************************/
   /* This procedure performs the process demand file routine */
   /***********************************************************/
   procedure process_demand_file(par_file_id in number, par_dmnd_file in varchar2, par_sply_file in varchar2) is

      /*-*/
      /* Local definitions
      /*-*/
      var_exception varchar2(4000);
      var_fcst_id common.st_id;
      var_fcst_valid boolean;
      v_item_valid boolean;
      v_invalid_reason common.st_message_string;
      v_calendar_day varchar2(8);
      v_tdu varchar2(18);
      v_price common.st_value;
      v_message_out common.st_message_string;
      v_pricing_condition common.st_message_string;
      v_forecast_type common.st_code;
      v_dmnd_type common.st_code;
      v_ovrd_tdu_flag common.st_status;
      v_matl_dtrmntn_offset common.st_counter;

      var_source_type fcst_source.source_type%type;
      var_casting_week load_dmnd.casting_mars_week%type;

      /*-*/
      /* Local cursors
      /*-*/
      cursor csr_load_file is
         select t01.*
           from load_file t01
          where t01.file_id = par_file_id;
      rcd_load_file csr_load_file%rowtype;

      cursor csr_fcst_source is
         select t01.*
           from fcst_source t01
          where t01.fcst_id = var_fcst_id
            and t01.source_type = var_source_type;
      rcd_fcst_source csr_fcst_source%rowtype;

      cursor csr_casting_weeks is
         select distinct t01.casting_mars_week
           from load_dmnd t01
          where t01.file_id = rcd_load_file.file_id;
      type typ_cast is table of csr_casting_weeks%rowtype index by binary_integer;
      tbl_cast typ_cast;

      cursor csr_load_data is
         select t01.*
           from load_dmnd t01
          where t01.file_id = rcd_load_file.file_id
            and t01.casting_mars_week = var_casting_week
            and t01.status = common.gc_loaded;
      type rcd_load_data is table of csr_load_data%rowtype index by binary_integer;
      tab_load_data rcd_load_data;

      cursor csr_demand_group_org(i_dmdgroup in varchar2, i_business_segment in varchar2, i_source_code in varchar2) is
         select dgo.dmnd_grp_org_id,
                dgo.currcy_code,
                dgo.invc_prty,
                dgo.distbn_chnl,
                dgo.pricing_formula,
                dgo.sales_org,
                dgo.bill_to_code,
                dgo.ship_to_code,
                dgo.mltplr_value,
                dgo.cust_hrrchy_code,
                dg.sply_whse_lst
           from dmnd_grp dg,
                dmnd_grp_type dt,
                dmnd_grp_org dgo
          where dg.dmnd_grp_type_id = dt.dmnd_grp_type_id
            and dg.dmnd_grp_id = dgo.dmnd_grp_id
            and dt.dmnd_grp_type_code = gc_demand_group_code_demand
            and dg.dmnd_grp_code = i_dmdgroup
            and dgo.source_code = i_source_code
            and dgo.bus_sgmnt_code = i_business_segment;

   /*-------------*/
   /* Begin block */
   /*-------------*/
   begin

      /*-*/
      /* Log the event start
      /*-*/
      lics_logging.write_log('Begin - Demand file processing');

      /*-*/
      /* Retrieve the requested load file
      /*-*/
      rcd_load_file.file_id := null;
      open csr_load_file;
      fetch csr_load_file into rcd_load_file;
      if csr_load_file%notfound then
         raise_application_error(-20000, 'File id (' || par_file_id || ') not found');
      end if;
      close csr_load_file;

      /*-*/
      /* Retrieve the moe settings (material determination offset)
      /*-*/
      v_matl_dtrmntn_offset := 0;
      open csr_moe setting;
      fetch csr_moe setting into rcd_moe setting;
      if csr_moe setting%found then
         if not(rcd_moe setting.matl_dtrmntn_offset is null) then
            v_matl_dtrmntn_offset := rcd_moe setting.matl_dtrmntn_offset;
         end if;
      else
         raise_application_error(-20000, 'Moe settings not found for MOE (' || rcd_load_file.moe_code || ')');
      end if;
      close csr_moe setting;

      /*-*/
      /* Update the load data status
      /*-*/
      update load_dmnd
         set status = common.gc_loaded
          where t01.file_id = rcd_load_file.file_id;
      commit;

      /*-*/
      /* Retrieve the file casting weeks
      /*-*/
      tbl_cast.delete;
      open csr_casting_weeks;
      fetch csr_casting_weeks bulk collect into tbl_cast;
      close csr_casting_weeks;

      /*-*/
      /* Process each forecast (casting week)
      /*-*/
      for icx in 1..tbl_cast.count

         /*-*/
         /* Set the casting week
         /*-*/
         var_casting_week := tbl_cast(icx);

         /*-*/
         /* Create/retrieve the forecast
         /*-*/
         if upper(rcd_load_file.wildcard) = upper(demand_forecast.gc_wildcard_demand) then
            v_forecast_type := demand_forecast.gc_ft_fcst;
         else
            v_forecast_type := demand_forecast.gc_ft_draft;
         end if;
         if demand_forecast.create_forecast(v_forecast_type,
                                            var_casting_week,
                                            gc_fs_invalid,
                                            rcd_load_file.moe_code,
                                            var_fcst_id,
                                            v_message_out) != common.gc_success then
            raise_application_error(-20000, 'Forecast id invalid or null');
         end if;

         /*-*/
         /* Clear the temporary forecast table
         /*-*/
         delete from dmnd_temp;
         commit;

         /*-*/
         /* Process the related load data
         /*-*/
         loop

            /*-*/
            /* Retrieve the load data in 10000 row chunks
            /* **note** 1. the cursor is opened and closed on each loop to avoid rollback segment issues
            /*          2. the cursor only retrieves load data with a loaded status so only unprocessed rows are used
            /*-*/
            open csr_load_data;
            fetch csr_load_data bulk collect into tab_load_data limit 10000;
            close csr_load_data;
            if tab_load_data.count = 0 then
               exit;
            end if;

            /*-*/
            /* Process the retrieved rows from the array
            /*-*/
            for idx in 1..tab_load_data.count loop

               /*-*/
               /* Validate the item
               /*-*/
               v_item_valid := true;
               v_invalid_reason := null;
               if nvl(tab_load_data(idx).zrep_valid,'*NULL') != common.gc_valid then
                  v_item_valid := false;
                  v_invalid_reason := 'ZREP Lookup Error.'
               end if;

               /*-*/
               /* Process the load data row - valid item
               /*-*/
               if v_item_valid = true then

                  /*-*/
                  /* Fatal errors on the load data row
                  /*-*/
                  if tab_load_data(idx).bus_sgmnt_code is null then
                     raise_application_error(-20000, 'Business segment invalid - ZREP code (' || tab_load_data(idx).zrep_code || ')');
                  end if;
                  if tab_load_data(idx).source_code is null then
                     raise_application_error(-20000, 'Make source invalid - ZREP code (' || tab_load_data(idx).zrep_code || ')');
                  end if;

                  /*-*/
                  /* Process the demand group data
                  /*-*/
                  var_found := false;
                  open csr_demand_group_org(tab_load_data(idx).dmdgroup, tab_load_data(idx).bus_sgmnt_code, tab_load_data(idx).source_code);
                  loop
                     fetch csr_demand_group_org into rcd_demand_group_org;
                     if csr_demand_group_org%notfound then
                        exit;
                     end if;

                     var_found := true;
                     v_calendar_day := to_char(tab_load_data(idx).startdate, 'YYYYMMDD');
                     v_tdu := null;
                     v_ovrd_tdu_flag := common.gc_no;

                     if tab_load_data(idx).fcst_text is not null then
                        if demand_forecast.get_ovrd_tdu(tab_load_data(idx).zrep_code,
                                                        rcd_demand_group_org.distbn_chnl,
                                                        rcd_demand_group_org.sales_org,
                                                        tab_load_data(idx).fcst_text,
                                                        v_tdu,
                                                        v_ovrd_tdu_flag,
                                                        v_invalid_reason,
                                                        v_message_out) != common.gc_success then
                           v_invalid_reason := v_invalid_reason || 'Using standard material determination. ';
                        end if;
                     end if;

                     if v_tdu is null then
                        if demand_forecast.get_tdu(tab_load_data(idx).zrep_code,
                                                   rcd_demand_group_org.distbn_chnl,
                                                   rcd_demand_group_org.sales_org,
                                                   rcd_demand_group_org.bill_to_code,
                                                   rcd_demand_group_org.ship_to_code,
                                                   rcd_demand_group_org.cust_hrrchy_code,
                                                   to_char((to_date(v_calendar_day, 'yyyymmdd') + v_matl_dtrmntn_offset),'yyyymmdd'),
                                                   v_tdu,
                                                   v_message_out) != common.gc_success then
                           v_invalid_reason := v_invalid_reason || 'TDU Material Determination Lookup Failure. ';
                        end if;
                     end if;

                     if demand_forecast.get_price(tab_load_data(idx).zrep_code,
                                                  v_tdu,
                                                  rcd_demand_group_org.distbn_chnl,
                                                  rcd_demand_group_org.bill_to_code,
                                                  rcd_demand_group_org.sales_org,
                                                  rcd_demand_group_org.invc_prty,
                                                  rcd_demand_group_org.sply_whse_lst,
                                                  v_calendar_day,
                                                  rcd_demand_group_org.pricing_formula,
                                                  rcd_demand_group_org.currcy_code,
                                                  v_pricing_condition,
                                                  v_price,
                                                  v_message_out) != common.gc_success then
                        v_invalid_reason := v_invalid_reason || 'Price Lookup Failure. ';
                     end if;

                     v_dmnd_type := null;
                     if tab_load_data(idx).TYPE = 1 then
                        v_dmnd_type := demand_forecast.gc_dmnd_type_1;
                     elsif tab_load_data(idx).TYPE = 2 then
                        v_dmnd_type := demand_forecast.gc_dmnd_type_2;
                     elsif tab_load_data(idx).TYPE = 3 then
                        v_dmnd_type := demand_forecast.gc_dmnd_type_3;
                     elsif tab_load_data(idx).TYPE = 4 then
                        v_dmnd_type := demand_forecast.gc_dmnd_type_4;
                     elsif tab_load_data(idx).TYPE = 5 then
                        v_dmnd_type := demand_forecast.gc_dmnd_type_5;
                     elsif tab_load_data(idx).TYPE = 6 then
                        v_dmnd_type := demand_forecast.gc_dmnd_type_6;
                     elsif tab_load_data(idx).TYPE = 7 then
                        v_dmnd_type := demand_forecast.gc_dmnd_type_7;
                     elsif tab_load_data(idx).TYPE = 8 then
                        v_dmnd_type := demand_forecast.gc_dmnd_type_8;
                     elsif tab_load_data(idx).TYPE = 9 then
                        v_dmnd_type := demand_forecast.gc_dmnd_type_9;
                     end if;

                     insert into dmnd_temp
                        (fcst_id,
                         dmnd_grp_org_id,
                         zrep,
                         qty_in_base_uom,
                         gsv,
                         price,
                         mars_week,
                         price_condition,
                         tdu,
                         type,
                         tdu_ovrd_flag)
                        values(var_fcst_id,
                               rcd_demand_group_org.dmnd_grp_org_id,
                               substr(tab_load_data(idx).zrep_code, length(tab_load_data(idx).zrep_code) - 5, 6),
                               tab_load_data(idx).qty * rcd_demand_group_org.mltplr_value,
                               (tab_load_data(idx).qty * rcd_demand_group_org.mltplr_value) * v_price,
                               v_price,
                               tab_load_data(idx).mars_week,
                               v_pricing_condition,
                               v_tdu,
                               v_dmnd_type,
                               v_ovrd_tdu_flag);

                  end loop;
                  close csr_demand_group_org;

                  /*-*/
                  /* No demand groups found
                  /*-*/
                  if var_found = false then
                     raise_application_error(-20000, 'Demand group org lookup failure - Tdu code (' || v_material_code || '), Dest code (' || v_dest_code || '), Source code (' || v_source_code || '), Business segment (' || rv_business_segment.bus_sgmnt_code || ')');
                  end if;

               end if;

               /*-*/
               /* Update the load data row
               /*-*/
               if v_item_valid = false then
                  update load_dmnd
                     set status = common.gc_errored,
                         error_msg = v_invalid_reason
                   where file_id = tab_load_data(idx).file_id
                     and file_line = tab_load_data(idx).file_line;
               else
                  update load_dmnd
                     set status = decode(v_invalid_reason, null, common.gc_processed, common.gc_failed),
                         error_msg = v_invalid_reason
                   where file_id = tab_load_data(idx).file_id
                     and file_line = tab_load_data(idx).file_line;
               end if;

            end loop;

            /*-*/
            /* Commit the temporary data
            /*-*/
            commit;

         end loop;

         /*-*/
         /* Load the new forecast data within the one commit cycle
         /* to preserve the integrity of the forecast
         /* **notes**
         /* 1. Delete the existing forecast data
         /* 2. Insert the new forecast data from the temporary table
         /* 3. Only delete rows for any demand_grp included with the current file
         /*-*/
         delete from dmnd_data
          where fcst_id = var_fcst_id
and not(type is null)
            and dmnd_grp_org_id in (select distinct dgo.dmnd_grp_org_id
                                      from dmnd_grp dg,
                                           dmnd_grp_org dgo,
                                           dmnd_grp_type dt,
                                           load_dmnd
                                     where dg.dmnd_grp_type_id = dt.dmnd_grp_type_id
                                       and dg.dmnd_grp_id = dgo.dmnd_grp_id
                                       and dt.dmnd_grp_type_code = demand_forecast.gc_demand_group_code_demand
                                       and load_dmnd.file_id = rcd_load_file.file_id
                                       and load_dmnd.dmdgroup = dg.dmnd_grp_code);
         insert into dmnd_data select * from dmnd_temp;

         /*-*/
         /* Clear the temporary forecast table
         /*-*/
         delete from dmnd_temp;

         /*-*/
         /* Insert/update the forecast source
         /*-*/
         begin
            insert into fcst_source
               (fcst_id,
                source_type,
                source_date)
               values(var_fcst_id,
                      '*DEMAND',
                      sysdate);
         exception
            when dup_val_on_index then
               update fcst_source
                  set source_date = sysdate
                where fcst_id = var_fcst_id
                  and source_type = '*DEMAND';
         end;

         /*-*/
         /* Check/mark the forecast for completion
         /*-*/
         var_fcst_valid := true;
         if rcd_moe_setting.dmnd_file = common.gc_yes then
            var_source_type := '*DEMAND';
            open csr_fcst_source;
            fetch csr_fcst_source into rcd_fcst_source;
            if csr_fcst_source%notfound then
               var_fcst_valid := false;
            end if;
            close csr_fcst_source;
         end if;
         if rcd_moe_setting.sply_file = common.gc_yes then
            var_source_type := '*SUPPLY';
            open csr_fcst_source;
            fetch csr_fcst_source into rcd_fcst_source;
            if csr_fcst_source%notfound then
               var_fcst_valid := false;
            end if;
           close csr_fcst_source;
         end if;
         if var_fcst_valid = true then
            update fcst
               set status = demand_forecast.gc_fs_valid
             where fcst_id = var_fcst_id;
         end if;

         /*-*/
         /* Commit the forecast
         /*-*/
         commit;

         /*-*/
         /* Stream the forecast dependants when required
         /*-*/
         if v_forecast_type = demand_forecast.gc_ft_fcst then
            if var_fcst_valid = true then
               lics_stream_loader.clear_parameters;
               lics_stream_loader.set_parameter('FCST_ID',to_char(var_fcst_id));
               lics_stream_loader.execute('DF_FCST_FINAL',null);
            end if;
         else
            if var_fcst_valid = true then
               lics_stream_loader.clear_parameters;
               lics_stream_loader.set_parameter('FCST_ID',to_char(var_fcst_id));
               lics_stream_loader.execute('DF_FCST_DRAFT',null);
            end if;
         end if;

      end loop;

      /*-*/
      /* Update the load file status to processed
      /*-*/
      update load_file
         set status = common.gc_processed
       where file_id = rcd_load_file.file_id;

      /*-*/
      /* Commit the database
      /*-*/
      commit;

      /*-*/
      /* Log the event end
      /*-*/
      lics_logging.write_log('End - Demand file processing');

   /*-------------------*/
   /* Exception handler */
   /*-------------------*/
   exception

      /**/
      /* Exception trap
      /**/
      when others then

         /*-*/
         /* Rollback the database
         /*-*/
         rollback;

         /*-*/
         /* Save the exception
         /*-*/
         var_exception := substr(SQLERRM, 1, 2048);

         /*-*/
         /* Update the load file when required
         /*-*/
         if not(rcd_load_file.file_id is null) then
            update load_file
               set status = common.gc_errored
             where file_id = rcd_load_file.file_id;
            commit;
         end if;

         /*-*/
         /* Log error
         /*-*/
         if lics_logging.is_created = true then
            lics_logging.write_log('**ERROR** - Demand file processing - ' || var_exception);
            lics_logging.write_log('End - Demand file processing');
         end if;

         /*-*/
         /* Raise an exception to the caller
         /*-*/
         raise_application_error(-20000, '**ERROR**');

   end process_demand_file;

   /***********************************************************/
   /* This procedure performs the process supply file routine */
   /***********************************************************/
   procedure process_supply_file(par_file_id in number, par_dmnd_file in varchar2, par_sply_file in varchar2) is

      /*-*/
      /* Local definitions
      /*-*/
      var_exception varchar2(4000);
      var_fcst_id common.st_id;
      var_fcst_valid boolean;
    rv_load_data           csr_load_data%ROWTYPE;   -- main data record set
    rv_casting_weeks       csr_casting_weeks%ROWTYPE;
    -- list of forecasr(casting weeks) within a file.
    rv_demand_group_org    csr_demand_group_org%ROWTYPE;
    -- demand group org lookup.
    rv_matl                csr_matl%ROWTYPE;   -- material lookup
    rv_business_segment    csr_business_segment%ROWTYPE;
    -- business segment lookup
    v_country_code         VARCHAR2 (2);   -- country code.
    v_price_condition      common.st_message_string;
    -- pricing formula used to calculate price.
    v_item_valid           BOOLEAN;   -- TDU is valid.
    v_invalid_reason       common.st_message_string;
    -- reject reason for record.
    v_calendar_day         VARCHAR2 (8);   -- calandar day for price lookup.
    v_zrep                 common.st_code;   -- ZREP lookup from TDU.
    v_price                common.st_value;   -- price found by get_price

    -- forecast id returned by create_forecast.
    v_message_out          common.st_message_string;
    -- standard inter procedure
    v_test_num             common.st_value;   -- check char is also integer
    v_material_code        common.st_code;   -- material code
    v_dest                 common.st_code;   -- dentination warehouse
    v_source_code          common.st_code;
    -- source code returned from get_source, used for forecast row multipexing.
    v_file_id              common.st_id;   -- load file id.
    v_moe_code             common.st_code;   -- moe code.
    v_forecast_type        common.st_code;
    v_event_type           common.st_code;
    v_event_text           common.st_message_string;

      var_source_type fcst_source.source_type%type;
      var_casting_week load_dmnd.casting_mars_week%type;


      /*-*/
      /* Local cursors
      /*-*/
      cursor csr_load_file is
         select t01.*
           from load_file t01
          where t01.file_id = par_file_id;
      rcd_load_file csr_load_file%rowtype;

      cursor csr_fcst_source is
         select t01.*
           from fcst_source t01
          where t01.fcst_id = var_fcst_id
            and t01.source_type = var_source_type;
      rcd_fcst_source csr_fcst_source%rowtype;

      cursor csr_casting_weeks is
         select distinct t01.casting_mars_week
           from load_sply t01
          where t01.file_id = rcd_load_file.file_id;
      type typ_cast is table of csr_casting_weeks%rowtype index by binary_integer;
      tbl_cast typ_cast;

      cursor csr_load_data is
         select t01.*
           from load_sply t01
          where t01.file_id = rcd_load_file.file_id
            and t01.casting_mars_week = var_casting_week
            and t01.status = common.gc_loaded;
      type rcd_load_data is table of csr_load_data%rowtype index by binary_integer;
      tab_load_data rcd_load_data;

      cursor csr_matl(i_matl_code in varchar2) is
         select t01.*,
                t02.bus_sgmnt_code
           from matl t01,
                matl_fg_clssfctn t02
          where t01.matl_code = t02.matl_code(+)
          where t01.matl_code = i_matl_code
            and t01.matl_type = 'FERT'
            and t01.trdd_unit = 'X';
      rcd_matl csr_matl%rowtype;

      cursor csr_demand_group_org (i_warehouse_code in varchar2, i_source_code in varchar2, i_business_segment_code in varchar2) is
         select dgo.dmnd_grp_org_id,
                dgo.currcy_code,
                dgo.invc_prty,
                dgo.distbn_chnl,
                dgo.pricing_formula,
                dgo.bill_to_code,
                dgo.ship_to_code,
                dgo.sales_org,
                dgo.cust_hrrchy_code,
                dgo.mltplr_value,
                dg.sply_whse_lst
           from dmnd_grp dg,
                dmnd_grp_type dt,
                dmnd_grp_org dgo
          where dg.dmnd_grp_type_id = dt.dmnd_grp_type_id
            and dg.dmnd_grp_id = dgo.dmnd_grp_id
            and dt.dmnd_grp_type_code = gc_demand_group_code_supply
            and dgo.source_code = i_source_code
            and dg.sply_whse_lst like '%' || i_warehouse_code || '%'
            and dgo.bus_sgmnt_code = i_business_segment_code;
      rcd_demand_group_org csr_demand_group_org%rowtype;

   /*-------------*/
   /* Begin block */
   /*-------------*/
   begin

      /*-*/
      /* Log the event start
      /*-*/
      lics_logging.write_log('Begin - Supply file processing');

      /*-*/
      /* Retrieve the requested load file
      /*-*/
      rcd_load_file.file_id := null;
      open csr_load_file;
      fetch csr_load_file into rcd_load_file;
      if csr_load_file%notfound then
         raise_application_error(-20000, 'File id (' || par_file_id || ') not found');
      end if;
      close csr_load_file;

      /*-*/
      /* Update the load data status
      /*-*/
      update load_sply
         set status = common.gc_loaded
          where t01.file_id = rcd_load_file.file_id;
      commit;

      /*-*/
      /* Retrieve the file casting weeks
      /*-*/
      tbl_cast.delete;
      open csr_casting_weeks;
      fetch csr_casting_weeks bulk collect into tbl_cast;
      close csr_casting_weeks;

      /*-*/
      /* Process each forecast (casting week)
      /*-*/
      for icx in 1..tbl_cast.count

         /*-*/
         /* Set the casting week
         /*-*/
         var_casting_week := tbl_cast(icx);

         /*-*/
         /* Create/retrieve the forecast
         /*-*/
         if upper(rcd_load_file.wildcard) = upper(demand_forecast.gc_wildcard_supply) then
            v_forecast_type := demand_forecast.gc_ft_fcst;
         else
            v_forecast_type := demand_forecast.gc_ft_draft;
         end if;
         if demand_forecast.create_forecast(v_forecast_type,
                                            var_casting_week,
                                            gc_fs_invalid,
                                            rcd_load_file.wildcard.moe_code,
                                            var_fcst_id,
                                            v_message_out) != common.gc_success then
            raise_application_error(-20000, 'Forecast id invalid or null');
         end if;

         /*-*/
         /* Clear the temporary forecast table
         /*-*/
         delete from dmnd_temp;
         commit;

         /*-*/
         /* Process the related load data
         /*-*/
         loop

            /*-*/
            /* Retrieve the load data in 10000 row chunks
            /* **note** 1. the cursor is opened and closed on each loop to avoid rollback segment issues
            /*          2. the cursor only retrieves load data with a loaded status so only unprocessed rows are used
            /*-*/
            open csr_load_data;
            fetch csr_load_data bulk collect into tab_load_data limit 10000;
            close csr_load_data;
            if tab_load_data.count = 0 then
               exit;
            end if;

            /*-*/
            /* Process the retrieved rows from the array
            /*-*/
            for idx in 1..tab_load_data.count loop

               /*-*/
               /* Validate the item
               /*-*/
               v_item_valid := true;
               v_invalid_reason := null;
               v_dest := tab_load_data(idx).dest;
               v_calendar_day := to_char(tab_load_data(idx).schedshipdate,'YYYYMMDD');
               v_material_code := reference_functions.full_matl_code(tab_load_data(idx).item);
               v_source_code := get_source_code(v_material_code);
               if length(trim(v_dest)) != 4 and length(trim(v_dest)) != 5 then
                  v_item_valid := false;
                  v_invalid_reason := v_invalid_reason || 'Unknown Destination Error. '
               end if;
               open csr_matl(v_material_code);
               fetch csr_matl into rcd_matl;
               if csr_matl%notfound then
                  v_item_valid := false;
                  v_invalid_reason := v_invalid_reason || 'ZREP Lookup Error ';
               else
                  if rcd_matl.bus_sgmnt_code is null then
                     raise_application_error(-20000, 'Business segment invalid - TDU code (' || v_material_code || ')');
                  end if;
               end if;
               close csr_matl;
               if demand_forecast.get_zrep_for_tdu(tab_load_data(idx).item, v_zrep, v_message_out) != common.gc_success then
                  v_item_valid := false;
                  v_invalid_reason := v_invalid_reason || 'ZREP Lookup Error. ';
               end if;

               /*-*/
               /* Process the load data row - valid item
               /*-*/
               if v_item_valid = true then

                  var_found := false;
                  open csr_demand_group_org(tab_load_data(idx).dest, v_source_code, rcd_matl.bus_sgmnt_code);
                  loop
                     fetch csr_demand_group_org into rcd_demand_group_org;
                     if csr_demand_group_org%notfound then
                        exit;
                     end if;

                     var_found := true;

                     if demand_forecast.get_price(v_zrep,
                                                  tab_load_data(idx).item,
                                                  rcd_demand_group_org.distbn_chnl,
                                                  rcd_demand_group_org.bill_to_code,
                                                  rcd_demand_group_org.sales_org,
                                                  rcd_demand_group_org.invc_prty,
                                                  rcd_demand_group_org.sply_whse_lst,
                                                  v_calendar_day,
                                                  rcd_demand_group_org.pricing_formula,
                                                  rcd_demand_group_org.currcy_code,
                                                  v_price_condition,
                                                  v_price,
                                                  v_message_out) != common.gc_success then
                        v_invalid_reason := 'Price Lookup Failure.';
                     end if;

                     insert into dmnd_temp
                        (fcst_id,
                         dmnd_grp_org_id,
                         tdu,
                         zrep,
                         qty_in_base_uom,
                         gsv,
                         mars_week,
                         price_condition,
                         price,
                         type)
                        values(var_fcst_id,
                               rcd_demand_group_org.dmnd_grp_org_id,
                               tab_load_data(idx).item,
                               ltrim(v_zrep, '0'),
                               tab_load_data(idx).qty * rcd_demand_group_org.mltplr_value,
                               (tab_load_data(idx).qty * rcd_demand_group_org.mltplr_value) * v_price,
                               tab_load_data(idx).mars_week,
                               v_price_condition,
                               v_price,
                               null);

                  end loop;
                  close csr_demand_group_org;

                  if var_found = false then
                     raise_application_error(-20000, 'Demand group org lookup failure - Tdu code (' || v_material_code || '), Dest code (' || v_dest_code || '), Source code (' || v_source_code || '), Business segment (' || rv_business_segment.bus_sgmnt_code || ')');
                   end if;

               end if;

               /*-*/
               /* Update the load data row
               /*-*/
               if v_item_valid = false then
                  update load_sply
                     set status = common.gc_errored,
                         processed_date = sysdate,
                         error_msg = v_invalid_reason
                   where file_id = tab_load_data(idx).file_id
                     and file_line = tab_load_data(idx).file_line;
               else
                  update load_sply
                     set status = decode(v_invalid_reason, null, common.gc_processed, common.gc_failed),
                         processed_date = sysdate,
                         error_msg = v_invalid_reason
                   where file_id = tab_load_data(idx).file_id
                     and file_line = tab_load_data(idx).file_line;
               end if;

            end loop;

            /*-*/
            /* Commit the temporary data
            /*-*/
            commit;

         end loop;

         /*-*/
         /* Load the new forecast data within the one commit cycle
         /* to preserve the integrity of the forecast
         /* **notes**
         /* 1. Delete the existing forecast data
         /* 2. Insert the new forecast data from the temporary table
         /* 3. Only delete rows for any demand_grp included with the current file
         /*-*/
         delete from dmnd_data
          where fcst_id = var_fcst_id
and type is null
            and dmnd_grp_org_id in (select distinct dgo.dmnd_grp_org_id
                                      from dmnd_grp dg,
                                           dmnd_grp_org dgo,
                                           dmnd_grp_type dt,
                                           load_sply
                                     where dg.dmnd_grp_type_id = dt.dmnd_grp_type_id
                                       and dg.dmnd_grp_id = dgo.dmnd_grp_id
                                       and dt.dmnd_grp_type_code = demand_forecast.gc_demand_group_code_supply
                                       and load_sply.file_id = rcd_load_file.file_id
                                       and dg.sply_whse_lst like '%' || load_sply.dest || '%');
         insert into dmnd_data select * from dmnd_temp;

         /*-*/
         /* Clear the temporary forecast table
         /*-*/
         delete from dmnd_temp;

         /*-*/
         /* Insert/update the forecast source
         /*-*/
         begin
            insert into fcst_source
               (fcst_id,
                source_type,
                source_date)
               values(var_fcst_id,
                      '*SUPPLY',
                      sysdate);
         exception
            when dup_val_on_index then
               update fcst_source
                  set source_date = sysdate
                where fcst_id = var_fcst_id
                  and source_type = '*SUPPLY';
         end;

         /*-*/
         /* Check/mark the forecast for completion
         /*-*/
         var_fcst_valid := true;
         if rcd_moe_setting.dmnd_file = common.gc_yes then
            var_source_type := '*DEMAND';
            open csr_fcst_source;
            fetch csr_fcst_source into rcd_fcst_source;
            if csr_fcst_source%notfound then
               var_fcst_valid := false;
            end if;
            close csr_fcst_source;
         end if;
         if rcd_moe_setting.sply_file = common.gc_yes then
            var_source_type := '*SUPPLY';
            open csr_fcst_source;
            fetch csr_fcst_source into rcd_fcst_source;
            if csr_fcst_source%notfound then
               var_fcst_valid := false;
            end if;
            close csr_fcst_source;
         end if;
         if var_fcst_valid = true then
            update fcst
               set status = demand_forecast.gc_fs_valid
             where fcst_id = var_fcst_id;
         end if;

         /*-*/
         /* Commit the forecast
         /*-*/
         commit;

         /*-*/
         /* Stream the forecast dependants when required
         /*-*/
         if v_forecast_type = demand_forecast.gc_ft_fcst then
            if var_fcst_valid = true then
               lics_stream_loader.clear_parameters;
               lics_stream_loader.set_parameter('FCST_ID',to_char(var_fcst_id));
               lics_stream_loader.execute('DF_FCST_FINAL',null);
            end if;
         else
            if var_fcst_valid = true then
               lics_stream_loader.clear_parameters;
               lics_stream_loader.set_parameter('FCST_ID',to_char(var_fcst_id));
               lics_stream_loader.execute('DF_FCST_DRAFT',null);
            end if;
         end if;

      end loop;

      /*-*/
      /* Update the load file status to processed
      /*-*/
      update load_file
         set status = common.gc_processed
       where file_id = rcd_load_file.file_id;

      /*-*/
      /* Commit the database
      /*-*/
      commit;

      /*-*/
      /* Log the event end
      /*-*/
      lics_logging.write_log('End - Supply file processing');

   /*-------------------*/
   /* Exception handler */
   /*-------------------*/
   exception

      /**/
      /* Exception trap
      /**/
      when others then

         /*-*/
         /* Rollback the database
         /*-*/
         rollback;

         /*-*/
         /* Save the exception
         /*-*/
         var_exception := substr(SQLERRM, 1, 2048);

         /*-*/
         /* Update the load file when required
         /*-*/
         if not(rcd_load_file.file_id is null) then
            update load_file
               set status = common.gc_errored
             where file_id = rcd_load_file.file_id;
            commit;
         end if;

         /*-*/
         /* Log error
         /*-*/
         if lics_logging.is_created = true then
            lics_logging.write_log('**ERROR** - Supply file processing - ' || var_exception);
            lics_logging.write_log('End - Supply file processing');
         end if;

         /*-*/
         /* Raise an exception to the caller
         /*-*/
         raise_application_error(-20000, '**ERROR**');

   end process_supply_feed;

   /******************************************************/
   /* This procedure performs the email forecast routine */
   /******************************************************/
   procedure email_forecast(par_fcst_id in number) is

      /*-*/
      /* Local definitions
      /*-*/
      var_exception varchar2(4000);
      var_log_prefix varchar2(256);
      var_log_search varchar2(256);
      var_loc_string varchar2(128);
      var_alert varchar2(256);
      var_email varchar2(256);
      var_locked boolean;
      var_errors boolean;
      v_result_msg varchar2(3900);
      v_heading boolean;
      v_qty_total common.st_value;
      v_counter common.st_counter;
      v_group_members common.t_strings;

      /*-*/
      /* Local constants
      /*-*/
      con_function constant varchar2(128) := 'DF Email Forecast';

      /*-*/
      /* Local cursors
      /*-*/
      cursor csr_fcst is
         select t01.*
           from fcst t01
          where t01.fcst_id = par_fcst_id;
      rcd_fcst csr_fcst;

      cursor csr_missing_prices(i_fcst_id in common.st_id) is
         SELECT e.acct_assign_name, a.zrep, (SELECT t0.matl_desc
                                              FROM matl t0
                                              WHERE t0.matl_code = reference_functions.full_matl_code (zrep) ) AS zrep_desc, a.tdu,
            ROUND (SUM (qty_in_base_uom) ) AS qty
          FROM dmnd_data a, dmnd_grp b, dmnd_grp_org c, dmnd_grp_type d, dmnd_acct_assign e
          WHERE a.fcst_id = i_fcst_id AND
           a.price IS NULL AND
           a.dmnd_grp_org_id = c.dmnd_grp_org_id AND
           b.dmnd_grp_id = c.dmnd_grp_id AND
           b.dmnd_grp_type_id = d.dmnd_grp_type_id AND
           c.acct_assign_id = e.acct_assign_id
          GROUP BY e.acct_assign_name, a.zrep, a.tdu;

      cursor csr_missing_determination(i_fcst_id in common.st_id) is
         SELECT e.acct_assign_name, a.zrep, (SELECT t0.matl_desc
                                              FROM matl t0
                                              WHERE t0.matl_code = reference_functions.full_matl_code (zrep) ) AS zrep_desc, SUM (qty_in_base_uom) AS qty
          FROM dmnd_data a, dmnd_grp b, dmnd_grp_org c, dmnd_grp_type d, dmnd_acct_assign e
          WHERE a.fcst_id = i_fcst_id AND
           a.tdu IS NULL AND
           a.dmnd_grp_org_id = c.dmnd_grp_org_id AND
           b.dmnd_grp_id = c.dmnd_grp_id AND
           b.dmnd_grp_type_id = d.dmnd_grp_type_id AND
           c.acct_assign_id = e.acct_assign_id
          GROUP BY e.acct_assign_name, a.zrep;

      cursor csr_negative_forecast(i_fcst_id in common.st_id) is
         SELECT e.acct_assign_name, b.dmnd_grp_name, a.zrep, (SELECT t0.matl_desc
                                                               FROM matl t0
                                                               WHERE t0.matl_code = reference_functions.full_matl_code (zrep) ) AS zrep_desc, a.mars_week,
            ROUND (SUM (qty_in_base_uom) ) AS qty
          FROM dmnd_data a, dmnd_grp b, dmnd_grp_org c, dmnd_grp_type d, dmnd_acct_assign e
          WHERE a.fcst_id = i_fcst_id AND
           a.dmnd_grp_org_id = c.dmnd_grp_org_id AND
           b.dmnd_grp_id = c.dmnd_grp_id AND
           b.dmnd_grp_type_id = d.dmnd_grp_type_id AND
           c.acct_assign_id = e.acct_assign_id
          GROUP BY e.acct_assign_name, b.dmnd_grp_name, a.mars_week, a.zrep
          HAVING SUM (qty_in_base_uom) <= -1
          ORDER BY acct_assign_name, dmnd_grp_name, mars_week;

      cursor csr_matl_moe(i_fcst_id in common.st_id) is
         SELECT t10.matl_code, t20.matl_desc
          FROM (SELECT DISTINCT zrep AS matl_code
                FROM dmnd_data t1
                WHERE fcst_id = i_fcst_id) t10,
            matl t20
          WHERE reference_functions.full_matl_code (t10.matl_code) = t20.matl_code AND
           NOT EXISTS (SELECT *
                       FROM matl_moe t0
                       WHERE t0.matl_code = reference_functions.full_matl_code (t10.matl_code) AND t0.item_usage_code IN ('BUY', 'MKE', 'COP') )
          UNION
          SELECT t10.matl_code, t20.matl_desc
          FROM (SELECT DISTINCT tdu AS matl_code
                FROM dmnd_data t1
                WHERE fcst_id = i_fcst_id) t10,
            matl t20
          WHERE reference_functions.full_matl_code (t10.matl_code) = t20.matl_code AND
           NOT EXISTS (SELECT *
                       FROM matl_moe t0
                       WHERE t0.matl_code = reference_functions.full_matl_code (t10.matl_code) AND t0.item_usage_code IN ('BUY', 'MKE', 'COP') );

   /*-------------*/
   /* Begin block */
   /*-------------*/
   begin

      /*-*/
      /* Initialise the procedure
      /*-*/
      var_log_prefix := 'DF - EMAIL_FORECAST';
      var_log_search := 'DF_EMAIL_FORECAST' || '_' || to_char(par_fcst_id);
      var_loc_string := lics_stream_processor.callback_lock;
      var_alert := lics_stream_processor.callback_alert;
      var_email := lics_stream_processor.callback_email;
      var_errors := false;
      var_locked := false;
      if var_loc_string is null then
         raise_application_error(-20000, 'Stream lock not returned - must be executed from the ICS Stream Processor');
      end if;

      /*-*/
      /* Log the event start
      /*-*/
      lics_logging.write_log('Begin - Email forecast');

      /*-*/
      /* Retrieve the forecast
      /*-*/
      open csr_fcst;
      fetch csr_fcst into rcd_fcst;
      if csr_fcst%notfound then
         raise_application_error(-20000, 'Forecast ' || to_char(par_fcst_id) || ' not found');
      end if;
      close csr_fcst;

      /*-*/
      /* Create the email
      /*-*/
      if emailit.create_email(null, 'DEMAND FINANCIALS EMAIL ALERT', v_result_msg) != common.gc_success then
         raise_application_error(-20000, 'Email creation failed - '||v_result_msg);
      end if;

      /*-*/
      /* Get list of email address to sent message to
      /*-*/
      if security.get_group_user_emails(demand_forecast.gc_demand_alerting_group || ' ' || rcd_fcst.moe_code, v_group_members, v_result_msg) = common.gc_success then
         for idx in v_group_members.first..v_group_members.last loop
            if emailit.add_recipient(emailit.gc_area_to, emailit.gc_type_user, v_group_members(idx), null, v_result_msg) != common.gc_success then
               raise_application_error(-20000, 'Add recipient failed - '||v_result_msg);
            end if;
         end loop;
      else
         raise_application_error(-20000, 'Failed to find mailing list - '||v_result_msg);
      end if;

      /*-*/
      /* Email heading
      /*-*/
      if rcd_fcst.forecast_type = demand_forecast.gc_ft_fcst then
          emailit.add_content ('Demand Financials Completed Forecast Missing Data Report.');
          emailit.add_content ('---------------------------------------------------------');
          emailit.add_content ('The following forecast has just completed processing a supply file');
          emailit.add_content ('and demand file.  If there are any problems with this forecast they');
          emailit.add_content ('will be summarised below. Please run the Missing Demand Data report');
          emailit.add_content ('to find out more detail about any reported issues.');
          emailit.add_content (common.gc_crlf);
          emailit.add_content ('## Forecast ID : ' || rcd_fcst.fcst_id);
          emailit.add_content ('   - Created : ' || TO_CHAR (SYSDATE, 'DD/MM/YYYY HH24:MI:SS') );
          emailit.add_content ('   - Casting Week : ' || rcd_fcst.casting_year || LPAD (rcd_fcst.casting_period, 2, '0') || rcd_fcst.casting_week);
          emailit.add_content ('   - MOE Code : ' || rcd_fcst.moe_code);
          emailit.add_content (common.gc_crlf);
      else
          emailit.add_content ('Demand Financials Completed Draft Forecast Missing Data Report.');
          emailit.add_content ('---------------------------------------------------------------');
          emailit.add_content ('The following forecast has just completed processing a demand draft');
          emailit.add_content ('file.  If there are any problems with this forecast they will be');
          emailit.add_content ('summarised below. Please run the Missing Demand Data report to find');
          emailit.add_content ('out more detail about any reported issues.');
          emailit.add_content (common.gc_crlf);
          emailit.add_content ('## Forecast ID : ' || rcd_fcst.fcst_id);
          emailit.add_content ('   - Created : ' || TO_CHAR (SYSDATE, 'DD/MM/YYYY HH24:MI:SS') );
          emailit.add_content ('   - Casting Week : ' || rcd_fcst.casting_year || LPAD (rcd_fcst.casting_period, 2, '0') || rcd_fcst.casting_week);
          emailit.add_content ('   - MOE Code : ' || rcd_fcst.moe_code);
          emailit.add_content (common.gc_crlf);
      end if;
      emailit.add_content('## Forecast Issues');

      /*-*/
      /* Material determination
      /*-*/
      v_heading := false;
      v_qty_total := 0;
      v_counter := 0;
      for rv_determination in csr_missing_determination(rcd_fcst.fcst_id) loop
         if v_heading = false then
            emailit.add_content('   * Material Determination Issues Were Detected.');
            v_heading := true;
         end if;
         emailit.add_content(   '     - '
                             || rv_determination.acct_assign_name
                             || ', ZREP: '
                             || rv_determination.zrep
                             || '-'
                             || rv_determination.zrep_desc
                             || ', QTY:'
                             || rv_determination.qty);
         v_counter := v_counter + 1;
         v_qty_total := v_qty_total + rv_determination.qty;
      end loop;
      if v_heading = false then
         emailit.add_content('   * No Missing Material Determination Issues Detected.');
      else
         emailit.add_content('     - Total Issues : ' || v_counter || ', Total Quantity Affected : ' || v_qty_total);
      end if;

      /*-*/
      /* Pricing
      /*-*/
      v_heading := false;
      v_qty_total := 0;
      v_counter := 0;
      for rv_price IN csr_missing_prices(rv_forecast.fcst_id) loop
         if v_heading = false then
            emailit.add_content('   * Pricing Issues Were Detected.');
            v_heading := true;
         end if;
         emailit.add_content(   '     - '
                             || rv_price.acct_assign_name
                             || ', ZREP: '
                             || rv_price.zrep
                             || '-'
                             || rv_price.zrep_desc
                             || ', TDU:'
                             || rv_price.tdu
                             || ', QTY:'
                             || rv_price.qty);
         v_counter := v_counter + 1;
         v_qty_total := v_qty_total + rv_price.qty;
      end loop;
      if v_heading = false then
         emailit.add_content('   * No Pricing Issues Detected.');
      else
         emailit.add_content('     - Total Issues : ' || v_counter || ', Total Quantity Affected : ' || v_qty_total);
      end if;

      /*-*/
      /* Negative forecasts
      /*-*/
      v_heading := false;
      v_qty_total := 0;
      v_counter := 0;
      for rv_negative in csr_negative_forecast(rv_forecast.fcst_id) loop
         if v_heading = false then
            emailit.add_content('   * Negative Forecast Issues Were Detected.');
            v_heading := true;
         end if;
         emailit.add_content(   '     - '
                             || rv_negative.acct_assign_name
                             || ', '
                             || rv_negative.dmnd_grp_name
                             || ', Mars Week:'
                             || rv_negative.mars_week
                             || ', ZREP: '
                             || rv_negative.zrep
                             || '-'
                             || rv_negative.zrep_desc
                             || ', QTY:'
                             || rv_negative.qty);
         v_counter := v_counter + 1;
         v_qty_total := v_qty_total + rv_negative.qty;
      end loop;
      if v_heading = false then
         emailit.add_content('   * No Negative Forecast Issues Detected.');
      else
         emailit.add_content('     - Total Issues : ' || v_counter || ', Total Quantity Affected : ' || v_qty_total);
      end if;

      /*-*/
      /* Material moe
      /*-*/
      v_heading := false;
      v_counter := 0;
      for rv_matl_moe in csr_matl_moe(rv_forecast.fcst_id) loop
         if v_heading = false then
            emailit.add_content('   * The Following Materials have missing MOE information.');
            v_heading := true;
         end if;
         emailit.add_content('     - ' || rv_matl_moe.matl_code || ', ' || rv_matl_moe.matl_desc);
         v_counter := v_counter + 1;
      end loop;
      if v_heading = false then
         emailit.add_content ('   * No Material MOE Issues Detected.');
      else
         emailit.add_content ('     - Total Issues : ' || v_counter);
      end if;

      /*-*/
      /* Send the email
      /*-*/
      if emailit.send_email(v_result_msg) != common.gc_success then
         raise_application_error(-20000, 'Email send failed - '||v_result_msg);
      end if;

      /*-*/
      /* Log the event end
      /*-*/
      lics_logging.write_log('End - Email forecast');

      /*-*/
      /* Log end
      /*-*/
      lics_logging.end_log;

      /*-*/
      /* Errors
      /*-*/
      if var_errors = true then

         /*-*/
         /* Alert and email
         /*-*/
         if not(trim(var_alert) is null) and trim(upper(var_alert)) != '*NONE' then
            lics_notification.send_alert(var_alert);
         end if;
         if not(trim(var_email) is null) and trim(upper(var_email)) != '*NONE' then
            lics_notification.send_email(dw_parameter.system_code,
                                         dw_parameter.system_unit,
                                         dw_parameter.system_environment,
                                         con_function,
                                         'DF_EMAIL_FORECAST',
                                         var_email,
                                         'One or more errors occurred during the Demand Financials Forecast Emailing execution - refer to web log - ' || lics_logging.callback_identifier);
         end if;

         /*-*/
         /* Raise an exception to the caller
         /*-*/
         raise_application_error(-20000, '**LOGGED ERROR**');

      end if;

   /*-------------------*/
   /* Exception handler */
   /*-------------------*/
   exception

      /**/
      /* Exception trap
      /**/
      when others then

         /*-*/
         /* Rollback the database
         /*-*/
         rollback;

         /*-*/
         /* Save the exception
         /*-*/
         var_exception := substr(SQLERRM, 1, 2048);

         /*-*/
         /* Log error
         /*-*/
         if lics_logging.is_created = true then
            lics_logging.write_log('**FATAL ERROR** - ' || var_exception);
            lics_logging.end_log;
         end if;

         /*-*/
         /* Release the lock when required
         /*-*/
         if var_locked = true then
            lics_locking.release(var_loc_string);
         end if;

         /*-*/
         /* Raise an exception to the calling application
         /*-*/
         raise_application_error(-20000, 'FATAL ERROR - DF_EMAIL_FORECAST - ' || var_exception);

   end email_forecast;

   /*******************************************************/
   /* This procedure performs the review creation routine */
   /*******************************************************/
   procedure business_review_creation(par_fcst_id in number) is

      /*-*/
      /* Local definitions
      /*-*/
      var_exception varchar2(4000);
      var_log_prefix varchar2(256);
      var_log_search varchar2(256);
      var_loc_string varchar2(128);
      var_alert varchar2(256);
      var_email varchar2(256);
      var_locked boolean;
      var_errors boolean;
      var_result_msg varchar2(3900);

      /*-*/
      /* Local constants
      /*-*/
      con_function constant varchar2(128) := 'DF Business Review Creation';

      /*-*/
      /* Local cursors
      /*-*/
      cursor csr_fcst is
         select t01.*
           from fcst t01
          where t01.fcst_id = par_fcst_id;
      rcd_fcst csr_fcst;

   /*-------------*/
   /* Begin block */
   /*-------------*/
   begin

      /*-*/
      /* Initialise the procedure
      /*-*/
      var_log_prefix := 'DF - BUSINESS_REVIEW CREATION';
      var_log_search := 'DF_BUSINESS_REVIEW_CREATION' || '_' || to_char(par_fcst_id);
      var_loc_string := lics_stream_processor.callback_lock;
      var_alert := lics_stream_processor.callback_alert;
      var_email := lics_stream_processor.callback_email;
      var_errors := false;
      var_locked := false;
      if var_loc_string is null then
         raise_application_error(-20000, 'Stream lock not returned - must be executed from the ICS Stream Processor');
      end if;

      /*-*/
      /* Retrieve the forecast
      /*-*/
      open csr_fcst;
      fetch csr_fcst into rcd_fcst;
      if csr_fcst%notfound then
         raise_application_error(-20000, 'Forecast ' || to_char(par_fcst_id) || ' not found');
      end if;
      close csr_fcst;

      /*-*/
      /* Log the event start
      /*-*/
      lics_logging.write_log('Begin - Review creation');

      /*-*/
      /* Create the business review
      /*-*/
      begin
         if demand_forecast.br_creation_check(rcd_fcst.fcst_id, var_result_msg) != common.gc_success then
            var_errors := true;
            lics_logging.write_log('Review creation failed - '||var_result_msg);
         end if;
      exception
         when others then
            var_errors := true;
            lics_logging.write_log(substr(SQLERRM, 1, 1024));
      end;

      /*-*/
      /* Log the event end
      /*-*/
      lics_logging.write_log('End - Review creation');

      /*-*/
      /* Log end
      /*-*/
      lics_logging.end_log;

      /*-*/
      /* Errors
      /*-*/
      if var_errors = true then

         /*-*/
         /* Alert and email
         /*-*/
         if not(trim(var_alert) is null) and trim(upper(var_alert)) != '*NONE' then
            lics_notification.send_alert(var_alert);
         end if;
         if not(trim(var_email) is null) and trim(upper(var_email)) != '*NONE' then
            lics_notification.send_email(dw_parameter.system_code,
                                         dw_parameter.system_unit,
                                         dw_parameter.system_environment,
                                         con_function,
                                         'DF_BUSINESS_REVIEW_CREATION',
                                         var_email,
                                         'One or more errors occurred during the Demand Financials Forecast Business Review Creation execution - refer to web log - ' || lics_logging.callback_identifier);
         end if;

         /*-*/
         /* Raise an exception to the caller
         /*-*/
         raise_application_error(-20000, '**LOGGED ERROR**');

      end if;

   /*-------------------*/
   /* Exception handler */
   /*-------------------*/
   exception

      /**/
      /* Exception trap
      /**/
      when others then

         /*-*/
         /* Rollback the database
         /*-*/
         rollback;

         /*-*/
         /* Save the exception
         /*-*/
         var_exception := substr(SQLERRM, 1, 2048);

         /*-*/
         /* Log error
         /*-*/
         if lics_logging.is_created = true then
            lics_logging.write_log('**FATAL ERROR** - ' || var_exception);
            lics_logging.end_log;
         end if;

         /*-*/
         /* Release the lock when required
         /*-*/
         if var_locked = true then
            lics_locking.release(var_loc_string);
         end if;

         /*-*/
         /* Raise an exception to the calling application
         /*-*/
         raise_application_error(-20000, 'FATAL ERROR - DF_BUSINESS_REVIEW_CREATION - ' || var_exception);

   end business_review_creation;

   /*****************************************************/
   /* This procedure performs the venus extract routine */
   /*****************************************************/
   procedure venus_extract(par_fcst_id in number) is

      /*-*/
      /* Local definitions
      /*-*/
      var_exception varchar2(4000);
      var_log_prefix varchar2(256);
      var_log_search varchar2(256);
      var_loc_string varchar2(128);
      var_alert varchar2(256);
      var_email varchar2(256);
      var_locked boolean;
      var_errors boolean;
      var_result_msg varchar2(3900);

      /*-*/
      /* Local constants
      /*-*/
      con_function constant varchar2(128) := 'DF Venus Extract';

      /*-*/
      /* Local cursors
      /*-*/
      cursor csr_fcst is
         select t01.*
           from fcst t01
          where t01.fcst_id = par_fcst_id;
      rcd_fcst csr_fcst;

   /*-------------*/
   /* Begin block */
   /*-------------*/
   begin

      /*-*/
      /* Initialise the procedure
      /*-*/
      var_log_prefix := 'DF - VENUS EXTRACT';
      var_log_search := 'DF_VENUS_EXTRACT' || '_' || to_char(par_fcst_id);
      var_loc_string := lics_stream_processor.callback_lock;
      var_alert := lics_stream_processor.callback_alert;
      var_email := lics_stream_processor.callback_email;
      var_errors := false;
      var_locked := false;
      if var_loc_string is null then
         raise_application_error(-20000, 'Stream lock not returned - must be executed from the ICS Stream Processor');
      end if;

      /*-*/
      /* Retrieve the forecast
      /*-*/
      open csr_fcst;
      fetch csr_fcst into rcd_fcst;
      if csr_fcst%notfound then
         raise_application_error(-20000, 'Forecast ' || to_char(par_fcst_id) || ' not found');
      end if;
      close csr_fcst;

      /*-*/
      /* Log the event start
      /*-*/
      lics_logging.write_log('Begin - Venus extract');

      /*-*/
      /* Extract the venus demand forecast data
      /*-*/
      begin
         if extract_venus.extract_demand_forecast(rcd_fcst.fcst_id, var_result_msg) != common.gc_success then
            var_errors := true;
            lics_logging.write_log('Venus extract demand forecast failed - '||var_result_msg);
         end if;
      exception
         when others then
            var_errors := true;
            lics_logging.write_log('Venus send demand forecast failed - '||substr(SQLERRM, 1, 1024));
      end;

      /*-*/
      /* Send the venus demand forecast data when required
      /*-*/
      if var_errors = false then
         begin
            if extract_venus.send_demand_forecast(rcd_fcst.fcst_id, var_result_msg) != common.gc_success then
               var_errors := true;
               lics_logging.write_log('Venus send demand forecast failed - '||var_result_msg);
            end if;
         exception
            when others then
               var_errors := true;
               lics_logging.write_log('Venus send demand forecast failed - '||substr(SQLERRM, 1, 1024));
         end;
      end if;

      /*-*/
      /* Log the event end
      /*-*/
      lics_logging.write_log('End - Venus extract');

      /*-*/
      /* Log end
      /*-*/
      lics_logging.end_log;

      /*-*/
      /* Errors
      /*-*/
      if var_errors = true then

         /*-*/
         /* Alert and email
         /*-*/
         if not(trim(var_alert) is null) and trim(upper(var_alert)) != '*NONE' then
            lics_notification.send_alert(var_alert);
         end if;
         if not(trim(var_email) is null) and trim(upper(var_email)) != '*NONE' then
            lics_notification.send_email(dw_parameter.system_code,
                                         dw_parameter.system_unit,
                                         dw_parameter.system_environment,
                                         con_function,
                                         'DF_VENUS_EXTRACT',
                                         var_email,
                                         'One or more errors occurred during the Demand Financials Venus Extract Demand Forecast execution - refer to web log - ' || lics_logging.callback_identifier);
         end if;

         /*-*/
         /* Raise an exception to the caller
         /*-*/
         raise_application_error(-20000, '**LOGGED ERROR**');

      end if;

   /*-------------------*/
   /* Exception handler */
   /*-------------------*/
   exception

      /**/
      /* Exception trap
      /**/
      when others then

         /*-*/
         /* Rollback the database
         /*-*/
         rollback;

         /*-*/
         /* Save the exception
         /*-*/
         var_exception := substr(SQLERRM, 1, 2048);

         /*-*/
         /* Log error
         /*-*/
         if lics_logging.is_created = true then
            lics_logging.write_log('**FATAL ERROR** - ' || var_exception);
            lics_logging.end_log;
         end if;

         /*-*/
         /* Release the lock when required
         /*-*/
         if var_locked = true then
            lics_locking.release(var_loc_string);
         end if;

         /*-*/
         /* Raise an exception to the calling application
         /*-*/
         raise_application_error(-20000, 'FATAL ERROR - DF_VENUS_EXTRACT - ' || var_exception);

   end venus_extract;

   /***********************************************/
   /* This function performs the purging routine  */
   /***********************************************/
   FUNCTION remove_file (i_file_id IN common.st_id, o_result_msg OUT common.st_message_string)
    RETURN common.st_result IS
    -- exception called with problems calling FILEIT , delete file.
    e_file_error      EXCEPTION;
    v_file_name       common.st_description;
    v_processing_msg  common.st_message_string;
    v_result_msg      common.st_message_string;

    CURSOR csr_file IS
      SELECT file_name
      FROM load_file
      WHERE file_id = i_file_id;
   BEGIN
    logit.enter_method (pc_package_name, 'REMOVE_FILE');
    logit.LOG ('Create savepoint.');
    SAVEPOINT remove_file_savepoint;
    logit.LOG ('Getting file name.');

    OPEN csr_file;

    FETCH csr_file
    INTO v_file_name;

    IF csr_file%NOTFOUND = TRUE THEN
      v_processing_msg := 'Unable to find file for id : ' || i_file_id || ' in order to remove it.';
      RAISE common.ge_error;
    END IF;

    CLOSE csr_file;

    logit.LOG ('Removing file : ' || i_file_id || ' - ' || v_file_name);

    DELETE FROM load_dmnd_raw
          WHERE file_id = i_file_id;

    DELETE FROM load_dmnd
          WHERE file_id = i_file_id;
          
    DELETE FROM load_sply_raw
          WHERE file_id = i_file_id;

    DELETE FROM load_sply
          WHERE file_id = i_file_id;

    DELETE FROM load_file
          WHERE file_id = i_file_id;

    COMMIT;
    logit.LOG ('Removing of file from demand financials complete.');
    o_result_msg := 'Successfully removed file : ' || v_file_name;
    logit.leave_method;
    RETURN common.gc_success;
    
    
   /*-------------------*/
   /* Exception handler */
   /*-------------------*/
   EXCEPTION
    WHEN common.ge_error THEN
      ROLLBACK TO SAVEPOINT remove_file_savepoint;
      -- file errored could now delete file.
      o_result_msg := common.create_error_msg (v_processing_msg);
      logit.log_error (o_result_msg);
      logit.leave_method;
      RETURN common.gc_error;
    WHEN OTHERS THEN
      -- unhandeled exceptions.
      ROLLBACK TO SAVEPOINT remove_file_savepoint;
      o_result_msg := common.create_error_msg ('Unable to delete old load data.') || common.create_sql_error_msg ();
      logit.LOG (o_result_msg);
      logit.leave_method;
      RETURN common.gc_error;
      
   /*-------------*/
   /* End routine */
   /*-------------*/
   end remove_file;

end fcst_processing; 
/
