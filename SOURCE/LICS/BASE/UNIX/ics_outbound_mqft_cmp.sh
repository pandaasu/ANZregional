#!/bin/sh
# ---------------------------------------------------------------------------
# SCRIPT  :     ics_outbound_mqft_cmp.sh
# AUTHOR  :     Linden Glen
# DATE    :     17-MAY-2005
# PARAMS  :     1 - S_FILE_NAME    # Source file name (full path)
#               2 - T_FILE_NAME    # Target file name
#               3 - QMGR_S         # Source Queue Manager for MQFT
#               4 - QMGR_T         # Target Queue Manager for MQFT
#               5 - DEST_DIR       # Destination file directory on target machine
#
# ---------------------------------------------------------------------------
#            F U N C T I O N A L     O V E R V I E W
# ---------------------------------------------------------------------------
#  Modification history at end of script
#
#  This script has been written specifically for the ANZ Interface Control
#  System (ANZICS) used to interface between and local site applications.
#  The script handles the loading of files generated by the ICS to a queue
#  on Maestro (which then handles its processing to Atlas) using mqft
#
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# setupConfig - configure script variables
# ---------------------------------------------------------------------------

function setup {

   # Declare Variables
   NOW=`date +%Y%m%d%H%M`       # Current date & time for filenames
   PRC_ID=`echo ${$}`           # Process ID
   UG=`id`                      # User and group

   INT_TYPE=MQFT

   # configuration file - specific per tier
   CONFIG_FILE="/ics/lad/prod/config/ics_loader.config"
   validateFile "${CONFIG_FILE}"

   # read variables from configuration file
   readVariable "OUTBOUND_PATH"
   readVariable "WORK_PATH"
   readVariable "ENV_VAR"
   readVariable "MAESTRO_FLAG"
   readVariable "LOGFILE"
   readVariable "SERVER"
   readVariable "CONMAN"
   readVariable "AMI_TIER"
   readVariable "ARCHIVE_PATH"
   readVariable "BIN_PATH"
   readVariable "MQFT_CMD"

   # set script id for log file
   SCRIPT_ID="ics_outbound_mqft.sh"

   # Declare Files & temp variables
   TMP_OUT="${WORK_PATH}/ics_outbound_mqft_${NOW}_${PRC_ID}.log"


   echo "INFO: Creating working log file [${TMP_OUT}]" >> ${TMP_OUT}
   /usr/bin/chmod 777 ${TMP_OUT}
   rc=${?}
   if [[ ${rc} -ne 0 ]] then
      logFile "WARNING: [setupConfig] Unable to change permissions 777 on ${TMP_OUT} user:group [${UG}]" "HARMLESS"
   fi

   eval ". ${ENV_VAR} ${AMI_TIER}" >> ${TMP_OUT} 2>&1
   if [[ ! -d "$AMI_PATH" ]]; then
      errorExit "ERROR: [setup] The AMI Platform failed during [${ENV_VAR} ${AMI_TIER}]." "CRITICAL"
   fi

   /usr/bin/chmod 777 ${S_FILE_NAME}
   rc=${?}
   if [[ ${rc} -ne 0 ]] then
      logFile "WARNING: [setup] Unable to change permissions 777 on ${S_FILE_NAME}" "HARMLESS"
   fi

   RETURN=`chmod 777 ${S_FILE_NAME} 2>&1` 
   rc=${?}
   if [[ ${rc} -ne 0 ]] then
      logFile "WARNING: [setupConfig:chmod] Unable to change permissions 777 on [${S_FILE_NAME}]" "HARMLESS"
      PERMS=`eval ls -l ${S_FILE_NAME}`
      logFile "INFO: [setupConfig:chmod] Reason [${RETURN}]" "HARMLESS"
      logFile "INFO: [setupConfig:chmod] User and Group are [${UG}]" "HARMLESS"
      logFile "INFO: [setupConfig:chmod] File detail [${PERMS}]" "HARMLESS"
   fi
   
}

# ---------------------------------------------------------------------------
# validateFile - checks that file exists, is readable and not null
# ---------------------------------------------------------------------------

function validateFile {

   file=${1}

   if [[ ! -e ${file} ]] then
      errorExit "ERROR: [validateFile] File not found [${file}]"
   elif [[ ! -s ${file} ]] then
      errorExit "ERROR: [validateFile] File empty [${file}]"
   elif [[ ! -r ${file} ]] then
      errorExit "ERROR: [validateFile] Cannot read from file [${file}]"
   fi

}

# ---------------------------------------------------------------------------
# readVariable   - read in variables from config file
# ---------------------------------------------------------------------------

function readVariable {

    variable=${1}

    /usr/bin/grep "^${variable}" < ${CONFIG_FILE} | read Tag ${variable} Filler

    # Validate variables from config file
    if [[ ${variable} = "" ]] then
      errorExit "ERROR: [readVariable] ${variable} entry not found in [${CONFIG_FILE}]"
    fi

}

# ---------------------------------------------------------------------------
# processFile
# ---------------------------------------------------------------------------

function processFile {

   logFile "INFO: [processFile] Processing file [${S_FILE_NAME}]" "HARMLESS"
   validateFile "${S_FILE_NAME}"

   if [[ $MAESTRO_FLAG -eq 1 ]] then

      logFile "INFO: [processFile] MAESTRO flag set [ON]" "HARMLESS"
      # Create Alias Name for use in Maestro logs
      INT_TYPE_R=`echo $INT_TYPE | sed 's/\./_/g'`
      ALIAS_NAME="ICSL_${INT_TYPE_R}_${NOW}${PRC_ID}"

      MAESTRO_OUTPUT=`/usr/local/bin/sudo -u mqm ${CONMAN} "sbd '${BIN_PATH}/ics_run_maestro.sh ${AMI_TIER} ${S_FILE_NAME} \"${MQFT_CMD} -source ${S_QMGR},${S_FILE_NAME} -target ${T_QMGR},${DEST_DIR}/${T_FILE_NAME} -trigger ${T_PROCESS}\"';alias=${ALIAS_NAME};recovery=continue;logon=mqm" 2>&1`
      echo "Maestro Output [" ${MAESTRO_OUTPUT} "]" >> ${TMP_OUT} 2>&1
      echo $MAESTRO_OUTPUT | grep "Submitted" >> ${TMP_OUT} 2>&1
      rc=${?}
         if [[ ${rc} -eq 0 ]] then
            logFile "INFO: [processFile] Maestro job submitted sucessfully : [${ALIAS_NAME}]" "HARMLESS"
         else
            errorExit "ERROR: [processFile] Maestro job not submitted"
         fi
   else
      logFile "INFO: [processFile] MAESTRO flag set [OFF]" "HARMLESS"
      logFile "INFO: [processFile] Prepare execution of command [${MQFT_CMD} -source ${S_QMGR},${S_FILE_NAME} -target ${T_QMGR},${DEST_DIR}/${T_FILE_NAME} -compress]" "HARMLESS"
      
      ${MQFT_CMD} -source ${S_QMGR},${S_FILE_NAME} -target ${T_QMGR},${DEST_DIR}/${T_FILE_NAME} -compress >> ${TMP_OUT} 2>&1
      rc=${?}
      if [[ ${rc} != 0 ]] then
         errorExit "ERROR: [processFile] MQFT Send Failed - Return Code [${rc}]"
      else
         logFile "INFO: [processFile] MQFT sent successfully" "HARMLESS"      
         archiveFile
      fi
  fi

}

# ---------------------------------------------------------------------------
# archiveFile - archive the processed file
# ---------------------------------------------------------------------------

function archiveFile {

   SOURCE_FILE=${S_FILE_NAME}

   # Processing Variables
   DESTINATION_FILE_BASE="${ARCHIVE_PATH}/${SOURCE_FILE##*/}"    # archive file base
   DESTINATION_FILE="${DESTINATION_FILE_BASE}"                   # archive file 
   DESTINATION_ZIP=$DESTINATION_FILE.Z                           # zipped file name

   logFile "INFO: [archiveFile] Moving file [${SOURCE_FILE}] to [${DESTINATION_FILE}]" "HARMLESS"

   # pre process zip file if necessary
   if [[ -a $DESTINATION_ZIP ]] then
      logFile "INFO: [archiveFile] The zipped archive [${DESTINATION_ZIP}] exists.  Remove for new zipped archive" "HARMLESS"
      /usr/bin/rm -f ${DESTINATION_FILE} >> ${TMP_OUT} 2>&1
      rc=${?}
      if [[ ${rc} -ne 0 ]] then
         logFile "WARNING: [archiveFile] Unable to remove file ${DESTINATION_FILE}" "HARMLESS"
      fi
   fi

   # move the file to the archive directory.
   /usr/bin/mv ${SOURCE_FILE} ${DESTINATION_FILE} >> ${TMP_OUT} 2>&1
   rc=${?}
   if [[ ${rc} -ne 0 ]] then
      errorExit "ERROR: [archiveFile] Unable to copy file to archive directory" "CRITICAL"
   else
      # Now compress the file.  Even if the file is going to be larger force the compress (-f)
      /usr/bin/compress -f ${DESTINATION_FILE} >> ${TMP_OUT} 2>&1
      rc=${?}
      if [[ ${rc} -ne 0 ]] then
         errorExit "ERROR: [archiveFile] Compress of file Failed" "CRITICAL"
      fi
      logFile "INFO: [archiveFile] File archived and zipped to [${DESTINATION_ZIP}]" "HARMLESS"
   fi

}

# ---------------------------------------------------------------------------
# checkParams - Ensure that passed parameters have values
# ---------------------------------------------------------------------------

function checkParams {

    if  [[ ${S_FILE_NAME} = "" ]] then
        errorExit "ERROR: [checkParams] File to load Parameter not specified"
    elif [[ ${T_FILE_NAME} = "" ]] then
        errorExit "ERROR: [checkParams] Name of File to load Parameter not specified"
    elif [[ ${S_QMGR} = "" ]] then
        errorExit "ERROR: [checkParams] Name of Source Queue Manager Parameter not specified"
    elif [[ ${T_QMGR} = "" ]] then
        errorExit "ERROR: [checkParams] Name of Target Queue Manager Parameter not specified"
    elif [[ ${DEST_DIR} = "" ]] then
        errorExit "ERROR: [checkParams] Destination directory on Target Server Parameter not specified"
    fi

   logFile "INFO: [checkParams] Verified script input parameters" "HARMLESS"

}

# ---------------------------------------------------------------------------
# logFile - Writes a script failure to a log file which tivoli will monitor
# ---------------------------------------------------------------------------

function logFile {
    
    err_msg="${1}"
    severity="${2}"
    
    print `date +"%Y-%m-%d %H:%M:%S"` INFO ${AMI_TIER} ${SERVER} ${severity} ${SCRIPT_ID}:[${PRC_ID}] ${INT_TYPE} ${err_msg} >> ${LOGFILE}

}

# ---------------------------------------------------------------------------
# errorExit - Handles a script failure
# ---------------------------------------------------------------------------

function errorExit {
    
    err_msg="${1}"
    logFile "$err_msg - see log [${TMP_OUT}]" "CRITICAL"
    echo "$err_msg"
    exit 1

}

# ---------------------------------------------------------------------------
# MAIN
# ---------------------------------------------------------------------------

S_FILE_NAME=${1}          # Variable: Source file name (full path)
T_FILE_NAME=${2}          # Variable: Target file name
S_QMGR=${3}               # Variable: Source Queue Manager for MQFT
T_QMGR=${4}               # Variable: Target Queue Manager for MQFT
DEST_DIR=${5}             # Variable: Destination file directory on target machine

setup                     # Function: Setup script variables

logFile "INFO: [main] Initialized script for compressed mqft to [${T_QMGR}]" "HARMLESS"
logFile "INFO: [main] Log file location : [${TMP_OUT}]" "HARMLESS"

checkParams               # Function: Check passed parameters have values
processFile               # Function: Handle file processing

logFile "INFO: [main] Completion of script for mqft to to [${T_QMGR}]" "HARMLESS"

exit 0                    # Exit: Exit script with successful flag (0)

# ---------------------------------------------------------------------------
#            M O D I F I C A T I O N   H I S T O R Y
# ---------------------------------------------------------------------------
#     Version     Date          Author          Modification
#     -------   -----------     -------------   --------------------------
#       1.0     17-MAY-2005     L. Glen    Original
#
# ---------------------------------------------------------------------------
